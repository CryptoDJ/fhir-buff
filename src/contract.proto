// Copyright (c) 2015 FHIR-Buff Developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

syntax = "proto3";

package fhirbuffs;

import "primitives.proto";
import "group.proto";

//change Reference types ????

message Actor {
	string entity = 1;//{ Reference(Contract|Device|Group|Location|Organization|Patient|Practitioner|RelatedPerson|Substance) }, // R!  Contract Actor Type
    repeated CodeableConcept role = 2;//[{ CodeableConcept }] // Contract  Actor Role
}

message ValuedItem {
	// entity[x]: Contract Valued Item Type. One of these 2:
	CodeableConcept entityCodeableConcept = 1; //{ CodeableConcept }
	Reference entityReference = 2; //{ Reference(Any) }
	Identifier identifier = 3; //{ Identifier } // Contract Valued Item Identifier
	Date effectiveTime = 4; //<dateTime>, // Contract Valued Item Effective Tiem
	Quantity quantity = 5; //{ Quantity(SimpleQuantity) }, // Count of Contract Valued Items
	Quantity unitPrice = 6; //{ Quantity(Money) }, // Contract Valued Item fee, charge, or cost
	Decimal factor = 7; //<decimal>, // Contract Valued Item Price Scaling Factor
	Decimal points = 8; //<decimal>, // Contract Valued Item Difficulty Scaling Factor
	Quantity net = 9; //{ Quantity(Money) } // Total Contract Valued Item Value
}

message Signer {
	Coding type = 1; //{ Coding }, // R!  Contract Signer Type
	Reference party = 2; //{ Reference(Organization|Patient|Practitioner|RelatedPerson) }, // R!  Contract Signatory Party
	string signature = 3; //<string> // R!  Contract Documentation Signature
}

message Term {
	repeated string term = 1; //???[{ // Contract Term List
	Identifier identifier = 2; //{ Identifier }, // Contract Term identifier
	Date issued = 3; //<dateTime>, // Contract Term Issue Date Time
	Period applies = 4; //{ Period }, // Contract Term Effective Time
	CodeableConcept type = 5; //{ CodeableConcept }, // Contract Term Type
	CodeableConcept subType = 6; //{ CodeableConcept }, // Contract Term Subtype
	Reference subject = 7; //{ Reference(Any) }, // Subject of this Contract Term
	repeated CodeableConcept action = 8; //[{ CodeableConcept }], // Contract Term Action
	repeated CodeableConcept actionReason = 9; //[{ CodeableConcept }], // Contract Term Action Reason
	repeated Actor actor = 10; //[{ // Contract Term Actor List
}

message Friendly {
	// content[x]: Easily comprehended representation of this Contract. One of these 2:
	repeated string friendly = 1; //[{ // Contract Friendly Language 
    Attachment contentAttachment = 2; //{ Attachment }
	Reference contentReference = 3; //{ Reference(Composition|DocumentReference|QuestionnaireResponse) }
}

message Legal {
    // content[x]: Contract Legal Text. One of these 2:
    Attachment contentAttachment = 1; //{ Attachment }
    Reference contentReference = 2; //{ Reference(Composition|DocumentReference|QuestionnaireResponse) }
}

message ContractRule {
    // Computable Contract Language
    // content[x]: Computable Contract Rules. One of these 2:
    Attachment contentAttachment = 1; //{ Attachment }
    Reference contentReference = 2;//{ Reference(DocumentReference) }
}

message Contract {
	Identifier identifier = 1; //{ Identifier }, // Contract identifier
	Date issued = 2; //"<dateTime>", // When this Contract was issued
	Period applies = 3; //{ Period }, // Effective time
	string subject = 4; //[{ Reference(Any) }], // Subject of this Contract
	repeated string authority = 5; //[{ Reference(Organization) }], // Authority under which this Contract has standing
	repeated string domain = 6; //[{ Reference(Location) }], // Domain in which this Contract applies
	CodeableConcept type = 7; //{ CodeableConcept }, // Contract Tyoe
	repeated CodeableConcept subType = 8; //[{ CodeableConcept }], // Contract Subtype
	repeated CodeableConcept action = 9; //[{ CodeableConcept }], // Contract Action
	repeated CodeableConcept actionReason = 10; //[{ CodeableConcept }], // Contract Action Reason
	repeated Actor actor = 11; //[{ // Contract Actor
	repeated ValuedItem valuedItem = 12; //[{ // Contract Valued Item
	repeated Signer signer = 13; //[{ // Contract Signer
	repeated Term term = 14; //[{ // Contract Term List
	string text = 15; //<string> Human readable Contract term text
	repeated ValuedItem termValuedItem = 16; //[{ // Contract Term Valued Item
	repeated Group group = 17; //[{ Content as for Contract.term }] // Nested Contract Term Group
	Attachment bindingAttachment = 18; // { Attachment }
}
