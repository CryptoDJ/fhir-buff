// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitives.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc-gen-objc which is incompatible with your Protocol Buffer sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

@class Address;
@class CodeableConcept;
@class Date;
@class Decimal;
@class HumanName;
@class Identifier;
@class Organization;
@class Period;
@class Quantity;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Gender

typedef GPB_ENUM(Gender) {
  Gender_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Gender_Male = 0,
  Gender_Female = 1,
  Gender_Other = 2,
  Gender_Unknown = 3,
};

GPBEnumDescriptor *Gender_EnumDescriptor(void);

BOOL Gender_IsValidValue(int32_t value);

#pragma mark - Enum Days

typedef GPB_ENUM(Days) {
  Days_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Days_Sunday = 0,
  Days_Monday = 1,
  Days_Tueday = 2,
  Days_Wednesday = 3,
  Days_Thursday = 4,
  Days_Friday = 5,
  Days_Satday = 6,
};

GPBEnumDescriptor *Days_EnumDescriptor(void);

BOOL Days_IsValidValue(int32_t value);

#pragma mark - Enum Address_AddressUses

typedef GPB_ENUM(Address_AddressUses) {
  Address_AddressUses_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Address_AddressUses_Home = 0,
  Address_AddressUses_Work = 1,
  Address_AddressUses_Temp = 2,
  Address_AddressUses_Old = 3,
};

GPBEnumDescriptor *Address_AddressUses_EnumDescriptor(void);

BOOL Address_AddressUses_IsValidValue(int32_t value);

#pragma mark - Enum Address_AddressTypes

typedef GPB_ENUM(Address_AddressTypes) {
  Address_AddressTypes_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Address_AddressTypes_Postal = 0,
  Address_AddressTypes_Physical = 1,
  Address_AddressTypes_Both = 2,
};

GPBEnumDescriptor *Address_AddressTypes_EnumDescriptor(void);

BOOL Address_AddressTypes_IsValidValue(int32_t value);

#pragma mark - Enum HumanName_HumanNameUses

typedef GPB_ENUM(HumanName_HumanNameUses) {
  HumanName_HumanNameUses_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  HumanName_HumanNameUses_Usual = 0,
  HumanName_HumanNameUses_Official = 1,
  HumanName_HumanNameUses_Temp = 2,
  HumanName_HumanNameUses_Nickname = 3,
  HumanName_HumanNameUses_Anonymous = 4,
  HumanName_HumanNameUses_Old = 5,
  HumanName_HumanNameUses_Maiden = 6,
};

GPBEnumDescriptor *HumanName_HumanNameUses_EnumDescriptor(void);

BOOL HumanName_HumanNameUses_IsValidValue(int32_t value);

#pragma mark - Enum ContactPoint_AuthorReferences

typedef GPB_ENUM(ContactPoint_AuthorReferences) {
  ContactPoint_AuthorReferences_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ContactPoint_AuthorReferences_Practitioner = 0,
  ContactPoint_AuthorReferences_Patient = 1,
  ContactPoint_AuthorReferences_RelatedPerson = 2,
  ContactPoint_AuthorReferences_Other = 3,
};

GPBEnumDescriptor *ContactPoint_AuthorReferences_EnumDescriptor(void);

BOOL ContactPoint_AuthorReferences_IsValidValue(int32_t value);

#pragma mark - Enum Identifier_IdentifierUses

typedef GPB_ENUM(Identifier_IdentifierUses) {
  Identifier_IdentifierUses_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Identifier_IdentifierUses_Usual = 0,
  Identifier_IdentifierUses_Official = 1,
  Identifier_IdentifierUses_Temp = 2,
  Identifier_IdentifierUses_Secondary = 3,
  Identifier_IdentifierUses_Unknown = 4,
  Identifier_IdentifierUses_Other = 5,
};

GPBEnumDescriptor *Identifier_IdentifierUses_EnumDescriptor(void);

BOOL Identifier_IdentifierUses_IsValidValue(int32_t value);

#pragma mark - Enum Link_LinkTarget

typedef GPB_ENUM(Link_LinkTarget) {
  Link_LinkTarget_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Link_LinkTarget_Patient = 0,
  Link_LinkTarget_Practitioner = 1,
  Link_LinkTarget_RelatedPerson = 2,
  Link_LinkTarget_Person = 3,
};

GPBEnumDescriptor *Link_LinkTarget_EnumDescriptor(void);

BOOL Link_LinkTarget_IsValidValue(int32_t value);

#pragma mark - Enum Link_LinkAssurance

typedef GPB_ENUM(Link_LinkAssurance) {
  Link_LinkAssurance_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Link_LinkAssurance_Unknown = 0,
  Link_LinkAssurance_Level1 = 1,
  Link_LinkAssurance_Level2 = 2,
  Link_LinkAssurance_Level3 = 3,
  Link_LinkAssurance_Level4 = 4,
};

GPBEnumDescriptor *Link_LinkAssurance_EnumDescriptor(void);

BOOL Link_LinkAssurance_IsValidValue(int32_t value);

#pragma mark - PrimitivesRoot

@interface PrimitivesRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - Date

typedef GPB_ENUM(Date_FieldNumber) {
  Date_FieldNumber_Value = 1,
};

@interface Date : GPBMessage

// date value
@property(nonatomic, readwrite) uint32_t value;

@end

#pragma mark - Decimal

typedef GPB_ENUM(Decimal_FieldNumber) {
  Decimal_FieldNumber_Low = 1,
  Decimal_FieldNumber_High = 2,
  Decimal_FieldNumber_SignScale = 3,
};

@interface Decimal : GPBMessage

// the first 64 bits of the underlying value
@property(nonatomic, readwrite) uint64_t low;

// the last 32 bis of the underlying value
@property(nonatomic, readwrite) uint32_t high;

// the number of decimal digits, and the sign
@property(nonatomic, readwrite) int32_t signScale;

@end

#pragma mark - Position

typedef GPB_ENUM(Position_FieldNumber) {
  Position_FieldNumber_Longitude = 1,
  Position_FieldNumber_Latitude = 2,
  Position_FieldNumber_Altitude = 3,
};

@interface Position : GPBMessage

//<decimal> Longitude with WGS84 datum
@property(nonatomic, readwrite) BOOL hasLongitude;
@property(nonatomic, readwrite, strong, null_resettable) Decimal *longitude;

//<decimal> Latitude with WGS84 datum
@property(nonatomic, readwrite) BOOL hasLatitude;
@property(nonatomic, readwrite, strong, null_resettable) Decimal *latitude;

//<decimal> Altitude with WGS84 datum
@property(nonatomic, readwrite) BOOL hasAltitude;
@property(nonatomic, readwrite, strong, null_resettable) Decimal *altitude;

@end

#pragma mark - Coding

typedef GPB_ENUM(Coding_FieldNumber) {
  Coding_FieldNumber_System = 1,
  Coding_FieldNumber_Version = 2,
  Coding_FieldNumber_Code = 3,
  Coding_FieldNumber_Display = 4,
  Coding_FieldNumber_UserSelected = 5,
};

@interface Coding : GPBMessage

//<uri> string that uses regex.  
@property(nonatomic, readwrite, copy, null_resettable) NSString *system;

//<string>
@property(nonatomic, readwrite, copy, null_resettable) NSString *version;

//<code> string that uses regex.  
@property(nonatomic, readwrite, copy, null_resettable) NSString *code;

//<string>
@property(nonatomic, readwrite, copy, null_resettable) NSString *display;

//<boolean>
@property(nonatomic, readwrite) BOOL userSelected;

@end

#pragma mark - CodeableConcept

typedef GPB_ENUM(CodeableConcept_FieldNumber) {
  CodeableConcept_FieldNumber_CodingArray = 1,
  CodeableConcept_FieldNumber_Text = 2,
};

@interface CodeableConcept : GPBMessage

//[{ Coding }]
// |codingArray| contains |Coding|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *codingArray;
@property(nonatomic, readonly) NSUInteger codingArray_Count;

//<string>
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

@end

#pragma mark - Period

typedef GPB_ENUM(Period_FieldNumber) {
  Period_FieldNumber_Start = 1,
  Period_FieldNumber_End = 2,
};

@interface Period : GPBMessage

//<dateTime> using UNIX time
@property(nonatomic, readwrite) BOOL hasStart;
@property(nonatomic, readwrite, strong, null_resettable) Date *start;

//<dateTime> using UNIX time
@property(nonatomic, readwrite) BOOL hasEnd;
@property(nonatomic, readwrite, strong, null_resettable) Date *end;

@end

#pragma mark - Address

typedef GPB_ENUM(Address_FieldNumber) {
  Address_FieldNumber_Use = 1,
  Address_FieldNumber_Type = 2,
  Address_FieldNumber_Text = 3,
  Address_FieldNumber_LineArray = 4,
  Address_FieldNumber_City = 5,
  Address_FieldNumber_District = 6,
  Address_FieldNumber_State = 7,
  Address_FieldNumber_PostalCode = 8,
  Address_FieldNumber_Country = 9,
  Address_FieldNumber_Period = 10,
};

@interface Address : GPBMessage

//<code>
@property(nonatomic, readwrite) Address_AddressUses use;

//<code>
@property(nonatomic, readwrite) Address_AddressTypes type;

//<string> Text representation of the address
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

// ["<string>"] Street name, number, direction & P.O. Box etc.
// |lineArray| contains |NSString|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *lineArray;
@property(nonatomic, readonly) NSUInteger lineArray_Count;

//<string> Name of city, town etc.
@property(nonatomic, readwrite, copy, null_resettable) NSString *city;

//<string> District name (aka county)
@property(nonatomic, readwrite, copy, null_resettable) NSString *district;

//<string> Sub-unit of country (abbreviations ok)
@property(nonatomic, readwrite, copy, null_resettable) NSString *state;

//<string> Postal code for area
@property(nonatomic, readwrite, copy, null_resettable) NSString *postalCode;

//<string> Country (can be ISO 3166 3 letter code)
@property(nonatomic, readwrite, copy, null_resettable) NSString *country;

//<Period> Time period when address was/is in use
@property(nonatomic, readwrite) BOOL hasPeriod;
@property(nonatomic, readwrite, strong, null_resettable) Period *period;

@end

int32_t Address_Use_RawValue(Address *message);
void SetAddress_Use_RawValue(Address *message, int32_t value);

int32_t Address_Type_RawValue(Address *message);
void SetAddress_Type_RawValue(Address *message, int32_t value);

#pragma mark - HumanName

typedef GPB_ENUM(HumanName_FieldNumber) {
  HumanName_FieldNumber_Use = 1,
  HumanName_FieldNumber_Text = 2,
  HumanName_FieldNumber_FamilyArray = 3,
  HumanName_FieldNumber_GivenArray = 4,
  HumanName_FieldNumber_PrefixArray = 5,
  HumanName_FieldNumber_SuffixArray = 6,
  HumanName_FieldNumber_Period = 7,
};

@interface HumanName : GPBMessage

//"<code>", // usual | official | temp | nickname | anonymous | old | maiden
@property(nonatomic, readwrite) HumanName_HumanNameUses use;

//"<string>"  Text representation of the full name
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

//["<string>"] Family name (often called 'Surname')
// |familyArray| contains |NSString|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *familyArray;
@property(nonatomic, readonly) NSUInteger familyArray_Count;

//["<string>"] Given names (not always 'first'). Includes middle names
// |givenArray| contains |NSString|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *givenArray;
@property(nonatomic, readonly) NSUInteger givenArray_Count;

//["<string>"] Parts that come before the name
// |prefixArray| contains |NSString|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *prefixArray;
@property(nonatomic, readonly) NSUInteger prefixArray_Count;

//["<string>"] Parts that come after the name
// |suffixArray| contains |NSString|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *suffixArray;
@property(nonatomic, readonly) NSUInteger suffixArray_Count;

//{ Period } Time period when name was/is in use
@property(nonatomic, readwrite) BOOL hasPeriod;
@property(nonatomic, readwrite, strong, null_resettable) Period *period;

@end

int32_t HumanName_Use_RawValue(HumanName *message);
void SetHumanName_Use_RawValue(HumanName *message, int32_t value);

#pragma mark - ContactPoint

typedef GPB_ENUM(ContactPoint_FieldNumber) {
  ContactPoint_FieldNumber_AuthorReference = 1,
  ContactPoint_FieldNumber_AuthorString = 2,
  ContactPoint_FieldNumber_Time = 3,
  ContactPoint_FieldNumber_Text = 4,
};

@interface ContactPoint : GPBMessage

//{ Reference(Practitioner|Patient|RelatedPerson) },
@property(nonatomic, readwrite) ContactPoint_AuthorReferences authorReference;

//<string>
@property(nonatomic, readwrite, copy, null_resettable) NSString *authorString;

//<dateTime> When the annotation was made
@property(nonatomic, readwrite) BOOL hasTime;
@property(nonatomic, readwrite, strong, null_resettable) Date *time;

//<string> R!  The annotation  - text content
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

@end

int32_t ContactPoint_AuthorReference_RawValue(ContactPoint *message);
void SetContactPoint_AuthorReference_RawValue(ContactPoint *message, int32_t value);

#pragma mark - Contact

typedef GPB_ENUM(Contact_FieldNumber) {
  Contact_FieldNumber_Purpose = 1,
  Contact_FieldNumber_Name = 2,
  Contact_FieldNumber_TelecomArray = 3,
  Contact_FieldNumber_Address = 4,
};

@interface Contact : GPBMessage

//{ CodeableConcept }  The type of contact
@property(nonatomic, readwrite) BOOL hasPurpose;
@property(nonatomic, readwrite, strong, null_resettable) CodeableConcept *purpose;

//{ HumanName } A name associated with the contact
@property(nonatomic, readwrite) BOOL hasName;
@property(nonatomic, readwrite, strong, null_resettable) HumanName *name;

//[{ ContactPoint }] Contact details (telephone, email, etc.)  for a contact
// |telecomArray| contains |ContactPoint|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *telecomArray;
@property(nonatomic, readonly) NSUInteger telecomArray_Count;

//{ Address } Visiting or postal addresses for the contact
@property(nonatomic, readwrite) BOOL hasAddress;
@property(nonatomic, readwrite, strong, null_resettable) Address *address;

@end

#pragma mark - Identifier

typedef GPB_ENUM(Identifier_FieldNumber) {
  Identifier_FieldNumber_Use = 1,
  Identifier_FieldNumber_TypeArray = 2,
  Identifier_FieldNumber_System = 3,
  Identifier_FieldNumber_Value = 4,
  Identifier_FieldNumber_Period = 5,
  Identifier_FieldNumber_AssignerArray = 6,
};

@interface Identifier : GPBMessage

//<code> usual | official | temp | secondary (If known)
@property(nonatomic, readwrite) Identifier_IdentifierUses use;

// { CodeableConcept } Description of identifier
// |typeArray| contains |CodeableConcept|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *typeArray;
@property(nonatomic, readonly) NSUInteger typeArray_Count;

//<uri> The namespace for the identifier
@property(nonatomic, readwrite, copy, null_resettable) NSString *system;

//<string> The value that is unique
@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

//{ Period } Time period when id is/was valid for use
@property(nonatomic, readwrite) BOOL hasPeriod;
@property(nonatomic, readwrite, strong, null_resettable) Period *period;

//{ Reference(Organization) }  Organization that issued id (may be just text
// |assignerArray| contains |Organization|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *assignerArray;
@property(nonatomic, readonly) NSUInteger assignerArray_Count;

@end

int32_t Identifier_Use_RawValue(Identifier *message);
void SetIdentifier_Use_RawValue(Identifier *message, int32_t value);

#pragma mark - Organization

typedef GPB_ENUM(Organization_FieldNumber) {
  Organization_FieldNumber_IdentifierArray = 1,
  Organization_FieldNumber_Active = 2,
  Organization_FieldNumber_Type = 3,
  Organization_FieldNumber_Name = 4,
  Organization_FieldNumber_TelecomArray = 5,
  Organization_FieldNumber_AddressArray = 6,
  Organization_FieldNumber_PartOf = 7,
  Organization_FieldNumber_ContactArray = 8,
};

@interface Organization : GPBMessage

//[{ Identifier }]
// |identifierArray| contains |Identifier|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *identifierArray;
@property(nonatomic, readonly) NSUInteger identifierArray_Count;

//<boolean>
@property(nonatomic, readwrite) BOOL active;

//{ CodeableConcept }
@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, strong, null_resettable) CodeableConcept *type;

//<string>
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

//[{ ContactPoint }]
// |telecomArray| contains |ContactPoint|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *telecomArray;
@property(nonatomic, readonly) NSUInteger telecomArray_Count;

//[{ Address }]
// |addressArray| contains |Address|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *addressArray;
@property(nonatomic, readonly) NSUInteger addressArray_Count;

//: { Reference(Organization) } The organization of which this organization forms a part
@property(nonatomic, readwrite) BOOL hasPartOf;
@property(nonatomic, readwrite, strong, null_resettable) Organization *partOf;

//: [{  Contact for the organization for a certain purpose
// |contactArray| contains |Contact|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *contactArray;
@property(nonatomic, readonly) NSUInteger contactArray_Count;

@end

#pragma mark - Attachment

typedef GPB_ENUM(Attachment_FieldNumber) {
  Attachment_FieldNumber_ContentType = 1,
  Attachment_FieldNumber_Language = 2,
  Attachment_FieldNumber_Data_p = 3,
  Attachment_FieldNumber_URL = 4,
  Attachment_FieldNumber_Size = 5,
  Attachment_FieldNumber_Hash_p = 6,
  Attachment_FieldNumber_Title = 7,
  Attachment_FieldNumber_Creation = 8,
};

@interface Attachment : GPBMessage

//<code> Mime type of the content, with charset etc. 
@property(nonatomic, readwrite, copy, null_resettable) NSString *contentType;

//<code> Human language of the content (BCP-47) 
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;

//<base64Binary> Data inline, base64ed
@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

//<uri> Uri where the data can be found
@property(nonatomic, readwrite, copy, null_resettable) NSString *uRL;

//<unsignedInt> Number of bytes of content (if url provided)
@property(nonatomic, readwrite) uint32_t size;

//<base64Binary> Hash of the data (sha-1, base64ed)
@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

//<string> Label to display in place of the data
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

//<dateTime> Date attachment was first created
@property(nonatomic, readwrite) BOOL hasCreation;
@property(nonatomic, readwrite, strong, null_resettable) Date *creation;

@end

#pragma mark - Link

typedef GPB_ENUM(Link_FieldNumber) {
  Link_FieldNumber_Target = 1,
  Link_FieldNumber_Assurance = 2,
};

@interface Link : GPBMessage

//Reference(Patient|Practitioner|RelatedPerson|Person) }, R!  The resource to which this actual person is associated
@property(nonatomic, readwrite) Link_LinkTarget target;

//<code> level1 | level2 | level3 | level4
@property(nonatomic, readwrite) Link_LinkAssurance assurance;

@end

int32_t Link_Target_RawValue(Link *message);
void SetLink_Target_RawValue(Link *message, int32_t value);

int32_t Link_Assurance_RawValue(Link *message);
void SetLink_Assurance_RawValue(Link *message, int32_t value);

#pragma mark - Quantity

typedef GPB_ENUM(Quantity_FieldNumber) {
  Quantity_FieldNumber_Value = 1,
  Quantity_FieldNumber_Comparator = 2,
  Quantity_FieldNumber_Unit = 3,
  Quantity_FieldNumber_System = 4,
  Quantity_FieldNumber_Code = 5,
};

@interface Quantity : GPBMessage

// <decimal> Numerical value (with implicit precision)
@property(nonatomic, readwrite) BOOL hasValue;
@property(nonatomic, readwrite, strong, null_resettable) Decimal *value;

//<code> < | <= | >= | > - how to understand the value
@property(nonatomic, readwrite, copy, null_resettable) NSString *comparator;

//<string> Unit representation
@property(nonatomic, readwrite, copy, null_resettable) NSString *unit;

// <uri>" System that defines coded unit form
@property(nonatomic, readwrite, copy, null_resettable) NSString *system;

// <code> Coded form of the unit 
@property(nonatomic, readwrite, copy, null_resettable) NSString *code;

@end

#pragma mark - Ratio

typedef GPB_ENUM(Ratio_FieldNumber) {
  Ratio_FieldNumber_Numerator = 1,
  Ratio_FieldNumber_Denominator = 2,
};

@interface Ratio : GPBMessage

//{ Quantity } Numerator value
@property(nonatomic, readwrite) BOOL hasNumerator;
@property(nonatomic, readwrite, strong, null_resettable) Quantity *numerator;

//{ Quantity } Denominator value
@property(nonatomic, readwrite) BOOL hasDenominator;
@property(nonatomic, readwrite, strong, null_resettable) Quantity *denominator;

@end

#pragma mark - Instance

typedef GPB_ENUM(Instance_FieldNumber) {
  Instance_FieldNumber_Identifier = 1,
  Instance_FieldNumber_Expiry = 2,
  Instance_FieldNumber_Quantity = 3,
};

@interface Instance : GPBMessage

//{ Identifier } Identifier of the package/container
@property(nonatomic, readwrite) BOOL hasIdentifier;
@property(nonatomic, readwrite, strong, null_resettable) Identifier *identifier;

//<dateTime> When no longer valid to use
@property(nonatomic, readwrite) BOOL hasExpiry;
@property(nonatomic, readwrite, strong, null_resettable) Date *expiry;

//{ Quantity(SimpleQuantity) } Amount of substance in the package
@property(nonatomic, readwrite) BOOL hasQuantity;
@property(nonatomic, readwrite, strong, null_resettable) Quantity *quantity;

@end

#pragma mark - ServiceType

typedef GPB_ENUM(ServiceType_FieldNumber) {
  ServiceType_FieldNumber_Type = 1,
  ServiceType_FieldNumber_Specialty = 2,
};

@interface ServiceType : GPBMessage

// { CodeableConcept }, // R!  Type of service delivered or performed
@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, strong, null_resettable) CodeableConcept *type;

// [{ CodeableConcept }] // Specialties handled by the Service Site
@property(nonatomic, readwrite) BOOL hasSpecialty;
@property(nonatomic, readwrite, strong, null_resettable) CodeableConcept *specialty;

@end

#pragma mark - AvailableTime

typedef GPB_ENUM(AvailableTime_FieldNumber) {
  AvailableTime_FieldNumber_DaysOfWeek = 1,
  AvailableTime_FieldNumber_AllDay = 2,
  AvailableTime_FieldNumber_AvailableStartTime = 3,
  AvailableTime_FieldNumber_AvailableEndTime = 4,
};

@interface AvailableTime : GPBMessage

//["<code>"], // mon | tue | wed | thu | fri | sat | sun
@property(nonatomic, readwrite) Days daysOfWeek;

// <boolean>, // Always available? e.g. 24 hour service
@property(nonatomic, readwrite) BOOL allDay;

//"<time>", // Opening time of day (ignored if allDay = true)
@property(nonatomic, readwrite) uint32_t availableStartTime;

//"<time>" // Closing time of day (ignored if allDay = true)
@property(nonatomic, readwrite) uint32_t availableEndTime;

@end

int32_t AvailableTime_DaysOfWeek_RawValue(AvailableTime *message);
void SetAvailableTime_DaysOfWeek_RawValue(AvailableTime *message, int32_t value);

#pragma mark - NotAvailableTime

typedef GPB_ENUM(NotAvailableTime_FieldNumber) {
  NotAvailableTime_FieldNumber_DaysOfWeek = 1,
  NotAvailableTime_FieldNumber_AllDay = 2,
  NotAvailableTime_FieldNumber_AvailableStartTime = 3,
  NotAvailableTime_FieldNumber_AvailableEndTime = 4,
};

@interface NotAvailableTime : GPBMessage

//["<code>"], // mon | tue | wed | thu | fri | sat | sun
@property(nonatomic, readwrite) Days daysOfWeek;

// <boolean>, // Always available? e.g. 24 hour service
@property(nonatomic, readwrite) BOOL allDay;

//"<time>", // Opening time of day (ignored if allDay = true)
@property(nonatomic, readwrite) uint32_t availableStartTime;

//"<time>" // Closing time of day (ignored if allDay = true)
@property(nonatomic, readwrite) uint32_t availableEndTime;

@end

int32_t NotAvailableTime_DaysOfWeek_RawValue(NotAvailableTime *message);
void SetNotAvailableTime_DaysOfWeek_RawValue(NotAvailableTime *message, int32_t value);

#pragma mark - Qualifications

typedef GPB_ENUM(Qualifications_FieldNumber) {
  Qualifications_FieldNumber_IdentifierArray = 1,
  Qualifications_FieldNumber_Code = 2,
  Qualifications_FieldNumber_Period = 3,
  Qualifications_FieldNumber_Issuer = 4,
};

@interface Qualifications : GPBMessage

//[{ Identifier }], // An identifier for this qualification for the practitioner
// |identifierArray| contains |Identifier|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *identifierArray;
@property(nonatomic, readonly) NSUInteger identifierArray_Count;

//{ CodeableConcept }, // R!  Coded representation of the qualification
@property(nonatomic, readwrite) BOOL hasCode;
@property(nonatomic, readwrite, strong, null_resettable) CodeableConcept *code;

//{ Period }, // Period during which the qualification is valid
@property(nonatomic, readwrite) BOOL hasPeriod;
@property(nonatomic, readwrite, strong, null_resettable) Period *period;

//{ Reference(Organization) } // Organization that regulates and issues the qualification
@property(nonatomic, readwrite) BOOL hasIssuer;
@property(nonatomic, readwrite, strong, null_resettable) Organization *issuer;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
