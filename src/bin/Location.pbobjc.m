// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Location.pbobjc.h"
#import "Primitives.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - LocationRoot

@implementation LocationRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[PrimitivesRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - LocationRoot_FileDescriptor

static GPBFileDescriptor *LocationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fhirbuffs"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Location

@implementation Location

@dynamic identifierArray, identifierArray_Count;
@dynamic status;
@dynamic name;
@dynamic description_p;
@dynamic mode;
@dynamic hasType, type;
@dynamic telecomArray, telecomArray_Count;
@dynamic hasAddress, address;
@dynamic hasPhysicalType, physicalType;
@dynamic hasPosition, position;
@dynamic hasManagingOrganization, managingOrganization;
@dynamic hasPartOf, partOf;

typedef struct Location__storage_ {
  uint32_t _has_storage_[1];
  Location_LocationMode mode;
  NSMutableArray *identifierArray;
  NSString *status;
  NSString *name;
  NSString *description_p;
  CodeableConcept *type;
  NSMutableArray *telecomArray;
  Address *address;
  CodeableConcept *physicalType;
  Position *position;
  Organization *managingOrganization;
  Location *partOf;
} Location__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "identifierArray",
        .number = Location_FieldNumber_IdentifierArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Location__storage_, identifierArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .fieldOptions = NULL,
      },
      {
        .name = "status",
        .number = Location_FieldNumber_Status,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Location__storage_, status),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = Location_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Location__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "description_p",
        .number = Location_FieldNumber_Description_p,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Location__storage_, description_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "mode",
        .number = Location_FieldNumber_Mode,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(Location__storage_, mode),
        .defaultValue.valueEnum = Location_LocationMode_Instance,
        .dataTypeSpecific.enumDescFunc = Location_LocationMode_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = Location_FieldNumber_Type,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Location__storage_, type),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(CodeableConcept),
        .fieldOptions = NULL,
      },
      {
        .name = "telecomArray",
        .number = Location_FieldNumber_TelecomArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Location__storage_, telecomArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ContactPoint),
        .fieldOptions = NULL,
      },
      {
        .name = "address",
        .number = Location_FieldNumber_Address,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Location__storage_, address),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .fieldOptions = NULL,
      },
      {
        .name = "physicalType",
        .number = Location_FieldNumber_PhysicalType,
        .hasIndex = 8,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Location__storage_, physicalType),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(CodeableConcept),
        .fieldOptions = NULL,
      },
      {
        .name = "position",
        .number = Location_FieldNumber_Position,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Location__storage_, position),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Position),
        .fieldOptions = NULL,
      },
      {
        .name = "managingOrganization",
        .number = Location_FieldNumber_ManagingOrganization,
        .hasIndex = 10,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Location__storage_, managingOrganization),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Organization),
        .fieldOptions = NULL,
      },
      {
        .name = "partOf",
        .number = Location_FieldNumber_PartOf,
        .hasIndex = 11,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Location__storage_, partOf),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Location),
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = Location_LocationMode_EnumDescriptor },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\003\t\014\000\013\024\000\014\006\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Location class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Location__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Location_Mode_RawValue(Location *message) {
  GPBDescriptor *descriptor = [Location descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Location_FieldNumber_Mode];
  return GPBGetMessageInt32Field(message, field);
}

void SetLocation_Mode_RawValue(Location *message, int32_t value) {
  GPBDescriptor *descriptor = [Location descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Location_FieldNumber_Mode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Location_LocationMode

GPBEnumDescriptor *Location_LocationMode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Instance", .number = Location_LocationMode_Instance },
      { .name = "Kind", .number = Location_LocationMode_Kind },
    };
    static const char *extraTextFormatInfo = "\002\000(\000\001$\000";
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Location_LocationMode)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:Location_LocationMode_IsValidValue
                                      extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

BOOL Location_LocationMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case Location_LocationMode_Instance:
    case Location_LocationMode_Kind:
      return YES;
    default:
      return NO;
  }
}


// @@protoc_insertion_point(global_scope)
