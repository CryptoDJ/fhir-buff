// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitives.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Fhirbuffs {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Primitives {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Primitives() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwcmltaXRpdmVzLnByb3RvEglmaGlyYnVmZnMiFQoERGF0ZRINCgV2YWx1",
            "ZRgBIAEoByI3CgdEZWNpbWFsEgsKA2xvdxgBIAEoBBIMCgRoaWdoGAIgASgN",
            "EhEKCXNpZ25TY2FsZRgDIAEoESJ9CghQb3NpdGlvbhIlCglsb25naXR1ZGUY",
            "ASABKAsyEi5maGlyYnVmZnMuRGVjaW1hbBIkCghsYXRpdHVkZRgCIAEoCzIS",
            "LmZoaXJidWZmcy5EZWNpbWFsEiQKCGFsdGl0dWRlGAMgASgLMhIuZmhpcmJ1",
            "ZmZzLkRlY2ltYWwiXgoGQ29kaW5nEg4KBnN5c3RlbRgBIAEoCRIPCgd2ZXJz",
            "aW9uGAIgASgJEgwKBGNvZGUYAyABKAkSDwoHZGlzcGxheRgEIAEoCRIUCgx1",
            "c2VyU2VsZWN0ZWQYBSABKAgiQgoPQ29kZWFibGVDb25jZXB0EiEKBmNvZGlu",
            "ZxgBIAMoCzIRLmZoaXJidWZmcy5Db2RpbmcSDAoEdGV4dBgCIAEoCSJGCgZQ",
            "ZXJpb2QSHgoFc3RhcnQYASABKAsyDy5maGlyYnVmZnMuRGF0ZRIcCgNlbmQY",
            "AiABKAsyDy5maGlyYnVmZnMuRGF0ZSLiAgoHQWRkcmVzcxIrCgN1c2UYASAB",
            "KA4yHi5maGlyYnVmZnMuQWRkcmVzcy5BZGRyZXNzVXNlcxItCgR0eXBlGAIg",
            "ASgOMh8uZmhpcmJ1ZmZzLkFkZHJlc3MuQWRkcmVzc1R5cGVzEgwKBHRleHQY",
            "AyABKAkSDAoEbGluZRgEIAMoCRIMCgRjaXR5GAUgASgJEhAKCGRpc3RyaWN0",
            "GAYgASgJEg0KBXN0YXRlGAcgASgJEhIKCnBvc3RhbENvZGUYCCABKAkSDwoH",
            "Y291bnRyeRgJIAEoCRIhCgZwZXJpb2QYCiABKAsyES5maGlyYnVmZnMuUGVy",
            "aW9kIjQKC0FkZHJlc3NVc2VzEggKBGhvbWUQABIICgR3b3JrEAESCAoEdGVt",
            "cBACEgcKA29sZBADIjIKDEFkZHJlc3NUeXBlcxIKCgZwb3N0YWwQABIMCghw",
            "aHlzaWNhbBABEggKBGJvdGgQAiKSAgoJSHVtYW5OYW1lEi8KA3VzZRgBIAEo",
            "DjIiLmZoaXJidWZmcy5IdW1hbk5hbWUuSHVtYW5OYW1lVXNlcxIMCgR0ZXh0",
            "GAIgASgJEg4KBmZhbWlseRgDIAMoCRINCgVnaXZlbhgEIAMoCRIOCgZwcmVm",
            "aXgYBSADKAkSDgoGc3VmZml4GAYgAygJEiEKBnBlcmlvZBgHIAEoCzIRLmZo",
            "aXJidWZmcy5QZXJpb2QiZAoNSHVtYW5OYW1lVXNlcxIJCgV1c3VhbBAAEgwK",
            "CG9mZmljaWFsEAESCAoEdGVtcBACEgwKCG5pY2tuYW1lEAMSDQoJYW5vbnlt",
            "b3VzEAQSBwoDb2xkEAUSCgoGbWFpZGVuEAYi5QEKDENvbnRhY3RQb2ludBJB",
            "Cg9hdXRob3JSZWZlcmVuY2UYASABKA4yKC5maGlyYnVmZnMuQ29udGFjdFBv",
            "aW50LkF1dGhvclJlZmVyZW5jZXMSFAoMYXV0aG9yU3RyaW5nGAIgASgJEh0K",
            "BHRpbWUYAyABKAsyDy5maGlyYnVmZnMuRGF0ZRIMCgR0ZXh0GAQgASgJIk8K",
            "EEF1dGhvclJlZmVyZW5jZXMSEAoMUHJhY3RpdGlvbmVyEAASCwoHUGF0aWVu",
            "dBABEhEKDVJlbGF0ZWRQZXJzb24QAhIJCgVPdGhlchADIqkBCgdDb250YWN0",
            "EisKB3B1cnBvc2UYASABKAsyGi5maGlyYnVmZnMuQ29kZWFibGVDb25jZXB0",
            "EiIKBG5hbWUYAiABKAsyFC5maGlyYnVmZnMuSHVtYW5OYW1lEigKB3RlbGVj",
            "b20YAyADKAsyFy5maGlyYnVmZnMuQ29udGFjdFBvaW50EiMKB2FkZHJlc3MY",
            "BCABKAsyEi5maGlyYnVmZnMuQWRkcmVzcyKyAgoKSWRlbnRpZmllchIxCgN1",
            "c2UYASABKA4yJC5maGlyYnVmZnMuSWRlbnRpZmllci5JZGVudGlmaWVyVXNl",
            "cxIoCgR0eXBlGAIgAygLMhouZmhpcmJ1ZmZzLkNvZGVhYmxlQ29uY2VwdBIO",
            "CgZzeXN0ZW0YAyABKAkSDQoFdmFsdWUYBCABKAkSIQoGcGVyaW9kGAUgASgL",
            "MhEuZmhpcmJ1ZmZzLlBlcmlvZBIpCghhc3NpZ25lchgGIAMoCzIXLmZoaXJi",
            "dWZmcy5Pcmdhbml6YXRpb24iWgoOSWRlbnRpZmllclVzZXMSCQoFVXN1YWwQ",
            "ABIMCghPZmZpY2lhbBABEggKBFRlbXAQAhINCglTZWNvbmRhcnkQAxILCgdV",
            "bmtub3duEAQSCQoFT3RoZXIQBSKeAgoMT3JnYW5pemF0aW9uEikKCmlkZW50",
            "aWZpZXIYASADKAsyFS5maGlyYnVmZnMuSWRlbnRpZmllchIOCgZhY3RpdmUY",
            "AiABKAgSKAoEdHlwZRgDIAEoCzIaLmZoaXJidWZmcy5Db2RlYWJsZUNvbmNl",
            "cHQSDAoEbmFtZRgEIAEoCRIoCgd0ZWxlY29tGAUgAygLMhcuZmhpcmJ1ZmZz",
            "LkNvbnRhY3RQb2ludBIjCgdhZGRyZXNzGAYgAygLMhIuZmhpcmJ1ZmZzLkFk",
            "ZHJlc3MSJwoGcGFydE9mGAcgASgLMhcuZmhpcmJ1ZmZzLk9yZ2FuaXphdGlv",
            "bhIjCgdjb250YWN0GAggAygLMhIuZmhpcmJ1ZmZzLkNvbnRhY3QinAEKCkF0",
            "dGFjaG1lbnQSEwoLY29udGVudFR5cGUYASABKAkSEAoIbGFuZ3VhZ2UYAiAB",
            "KAkSDAoEZGF0YRgDIAEoDBILCgN1cmwYBCABKAkSDAoEc2l6ZRgFIAEoDRIM",
            "CgRoYXNoGAYgASgMEg0KBXRpdGxlGAcgASgJEiEKCGNyZWF0aW9uGAggASgL",
            "Mg8uZmhpcmJ1ZmZzLkRhdGUi/gEKBExpbmsSKgoGdGFyZ2V0GAEgASgOMhou",
            "ZmhpcmJ1ZmZzLkxpbmsuTGlua1RhcmdldBIwCglhc3N1cmFuY2UYAiABKA4y",
            "HS5maGlyYnVmZnMuTGluay5MaW5rQXNzdXJhbmNlIkoKCkxpbmtUYXJnZXQS",
            "CwoHUGF0aWVudBAAEhAKDFByYWN0aXRpb25lchABEhEKDVJlbGF0ZWRQZXJz",
            "b24QAhIKCgZQZXJzb24QAyJMCg1MaW5rQXNzdXJhbmNlEgsKB3Vua25vd24Q",
            "ABIKCgZsZXZlbDEQARIKCgZsZXZlbDIQAhIKCgZsZXZlbDMQAxIKCgZsZXZl",
            "bDQQBCJtCghRdWFudGl0eRIhCgV2YWx1ZRgBIAEoCzISLmZoaXJidWZmcy5E",
            "ZWNpbWFsEhIKCmNvbXBhcmF0b3IYAiABKAkSDAoEdW5pdBgDIAEoCRIOCgZz",
            "eXN0ZW0YBCABKAkSDAoEY29kZRgFIAEoCSJZCgVSYXRpbxImCgludW1lcmF0",
            "b3IYASABKAsyEy5maGlyYnVmZnMuUXVhbnRpdHkSKAoLZGVub21pbmF0b3IY",
            "AiABKAsyEy5maGlyYnVmZnMuUXVhbnRpdHkifQoISW5zdGFuY2USKQoKaWRl",
            "bnRpZmllchgBIAEoCzIVLmZoaXJidWZmcy5JZGVudGlmaWVyEh8KBmV4cGly",
            "eRgCIAEoCzIPLmZoaXJidWZmcy5EYXRlEiUKCHF1YW50aXR5GAMgASgLMhMu",
            "ZmhpcmJ1ZmZzLlF1YW50aXR5ImYKC1NlcnZpY2VUeXBlEigKBHR5cGUYASAB",
            "KAsyGi5maGlyYnVmZnMuQ29kZWFibGVDb25jZXB0Ei0KCXNwZWNpYWx0eRgC",
            "IAEoCzIaLmZoaXJidWZmcy5Db2RlYWJsZUNvbmNlcHQiegoNQXZhaWxhYmxl",
            "VGltZRIjCgpkYXlzT2ZXZWVrGAEgASgOMg8uZmhpcmJ1ZmZzLkRheXMSDgoG",
            "YWxsRGF5GAIgASgIEhoKEmF2YWlsYWJsZVN0YXJ0VGltZRgDIAEoDRIYChBh",
            "dmFpbGFibGVFbmRUaW1lGAQgASgNIn0KEE5vdEF2YWlsYWJsZVRpbWUSIwoK",
            "ZGF5c09mV2VlaxgBIAEoDjIPLmZoaXJidWZmcy5EYXlzEg4KBmFsbERheRgC",
            "IAEoCBIaChJhdmFpbGFibGVTdGFydFRpbWUYAyABKA0SGAoQYXZhaWxhYmxl",
            "RW5kVGltZRgEIAEoDSKxAQoOUXVhbGlmaWNhdGlvbnMSKQoKaWRlbnRpZmll",
            "chgBIAMoCzIVLmZoaXJidWZmcy5JZGVudGlmaWVyEigKBGNvZGUYAiABKAsy",
            "Gi5maGlyYnVmZnMuQ29kZWFibGVDb25jZXB0EiEKBnBlcmlvZBgDIAEoCzIR",
            "LmZoaXJidWZmcy5QZXJpb2QSJwoGaXNzdWVyGAQgASgLMhcuZmhpcmJ1ZmZz",
            "Lk9yZ2FuaXphdGlvbio2CgZHZW5kZXISCAoEbWFsZRAAEgoKBmZlbWFsZRAB",
            "EgkKBW90aGVyEAISCwoHdW5rbm93bhADKl8KBERheXMSCgoGc3VuZGF5EAAS",
            "CgoGbW9uZGF5EAESCgoGdHVlZGF5EAISDQoJd2VkbmVzZGF5EAMSDAoIdGh1",
            "cnNkYXkQBBIKCgZmcmlkYXkQBRIKCgZzYXRkYXkQBmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::Fhirbuffs.Gender), typeof(global::Fhirbuffs.Days), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Date), new[]{ "Value" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Decimal), new[]{ "Low", "High", "SignScale" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Position), new[]{ "Longitude", "Latitude", "Altitude" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Coding), new[]{ "System", "Version", "Code", "Display", "UserSelected" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.CodeableConcept), new[]{ "Coding", "Text" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Period), new[]{ "Start", "End" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Address), new[]{ "Use", "Type", "Text", "Line", "City", "District", "State", "PostalCode", "Country", "Period" }, null, new[]{ typeof(global::Fhirbuffs.Address.Types.AddressUses), typeof(global::Fhirbuffs.Address.Types.AddressTypes) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.HumanName), new[]{ "Use", "Text", "Family", "Given", "Prefix", "Suffix", "Period" }, null, new[]{ typeof(global::Fhirbuffs.HumanName.Types.HumanNameUses) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.ContactPoint), new[]{ "AuthorReference", "AuthorString", "Time", "Text" }, null, new[]{ typeof(global::Fhirbuffs.ContactPoint.Types.AuthorReferences) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Contact), new[]{ "Purpose", "Name", "Telecom", "Address" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Identifier), new[]{ "Use", "Type", "System", "Value", "Period", "Assigner" }, null, new[]{ typeof(global::Fhirbuffs.Identifier.Types.IdentifierUses) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Organization), new[]{ "Identifier", "Active", "Type", "Name", "Telecom", "Address", "PartOf", "Contact" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Attachment), new[]{ "ContentType", "Language", "Data", "Url", "Size", "Hash", "Title", "Creation" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Link), new[]{ "Target", "Assurance" }, null, new[]{ typeof(global::Fhirbuffs.Link.Types.LinkTarget), typeof(global::Fhirbuffs.Link.Types.LinkAssurance) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Quantity), new[]{ "Value", "Comparator", "Unit", "System", "Code" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Ratio), new[]{ "Numerator", "Denominator" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Instance), new[]{ "Identifier", "Expiry", "Quantity" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.ServiceType), new[]{ "Type", "Specialty" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.AvailableTime), new[]{ "DaysOfWeek", "AllDay", "AvailableStartTime", "AvailableEndTime" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.NotAvailableTime), new[]{ "DaysOfWeek", "AllDay", "AvailableStartTime", "AvailableEndTime" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.Qualifications), new[]{ "Identifier", "Code", "Period", "Issuer" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Gender {
    male = 0,
    female = 1,
    other = 2,
    unknown = 3,
  }

  public enum Days {
    sunday = 0,
    monday = 1,
    tueday = 2,
    wednesday = 3,
    thursday = 4,
    friday = 5,
    satday = 6,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Date : pb::IMessage<Date> {
    private static readonly pb::MessageParser<Date> _parser = new pb::MessageParser<Date>(() => new Date());
    public static pb::MessageParser<Date> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Date() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Date(Date other) : this() {
      value_ = other.value_;
    }

    public Date Clone() {
      return new Date(this);
    }

    public const int ValueFieldNumber = 1;
    private uint value_;
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Date);
    }

    public bool Equals(Date other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Date other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Value = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Decimal : pb::IMessage<Decimal> {
    private static readonly pb::MessageParser<Decimal> _parser = new pb::MessageParser<Decimal>(() => new Decimal());
    public static pb::MessageParser<Decimal> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Decimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Decimal(Decimal other) : this() {
      low_ = other.low_;
      high_ = other.high_;
      signScale_ = other.signScale_;
    }

    public Decimal Clone() {
      return new Decimal(this);
    }

    public const int LowFieldNumber = 1;
    private ulong low_;
    public ulong Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    public const int HighFieldNumber = 2;
    private uint high_;
    public uint High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    public const int SignScaleFieldNumber = 3;
    private int signScale_;
    public int SignScale {
      get { return signScale_; }
      set {
        signScale_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Decimal);
    }

    public bool Equals(Decimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Low != other.Low) return false;
      if (High != other.High) return false;
      if (SignScale != other.SignScale) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Low != 0UL) hash ^= Low.GetHashCode();
      if (High != 0) hash ^= High.GetHashCode();
      if (SignScale != 0) hash ^= SignScale.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Low != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Low);
      }
      if (High != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(High);
      }
      if (SignScale != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(SignScale);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Low != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Low);
      }
      if (High != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(High);
      }
      if (SignScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SignScale);
      }
      return size;
    }

    public void MergeFrom(Decimal other) {
      if (other == null) {
        return;
      }
      if (other.Low != 0UL) {
        Low = other.Low;
      }
      if (other.High != 0) {
        High = other.High;
      }
      if (other.SignScale != 0) {
        SignScale = other.SignScale;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Low = input.ReadUInt64();
            break;
          }
          case 16: {
            High = input.ReadUInt32();
            break;
          }
          case 24: {
            SignScale = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Position(Position other) : this() {
      Longitude = other.longitude_ != null ? other.Longitude.Clone() : null;
      Latitude = other.latitude_ != null ? other.Latitude.Clone() : null;
      Altitude = other.altitude_ != null ? other.Altitude.Clone() : null;
    }

    public Position Clone() {
      return new Position(this);
    }

    public const int LongitudeFieldNumber = 1;
    private global::Fhirbuffs.Decimal longitude_;
    public global::Fhirbuffs.Decimal Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    public const int LatitudeFieldNumber = 2;
    private global::Fhirbuffs.Decimal latitude_;
    public global::Fhirbuffs.Decimal Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    public const int AltitudeFieldNumber = 3;
    private global::Fhirbuffs.Decimal altitude_;
    public global::Fhirbuffs.Decimal Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Longitude, other.Longitude)) return false;
      if (!object.Equals(Latitude, other.Latitude)) return false;
      if (!object.Equals(Altitude, other.Altitude)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (longitude_ != null) hash ^= Longitude.GetHashCode();
      if (latitude_ != null) hash ^= Latitude.GetHashCode();
      if (altitude_ != null) hash ^= Altitude.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (longitude_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Longitude);
      }
      if (latitude_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Latitude);
      }
      if (altitude_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Altitude);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (longitude_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Longitude);
      }
      if (latitude_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Latitude);
      }
      if (altitude_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Altitude);
      }
      return size;
    }

    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.longitude_ != null) {
        if (longitude_ == null) {
          longitude_ = new global::Fhirbuffs.Decimal();
        }
        Longitude.MergeFrom(other.Longitude);
      }
      if (other.latitude_ != null) {
        if (latitude_ == null) {
          latitude_ = new global::Fhirbuffs.Decimal();
        }
        Latitude.MergeFrom(other.Latitude);
      }
      if (other.altitude_ != null) {
        if (altitude_ == null) {
          altitude_ = new global::Fhirbuffs.Decimal();
        }
        Altitude.MergeFrom(other.Altitude);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (longitude_ == null) {
              longitude_ = new global::Fhirbuffs.Decimal();
            }
            input.ReadMessage(longitude_);
            break;
          }
          case 18: {
            if (latitude_ == null) {
              latitude_ = new global::Fhirbuffs.Decimal();
            }
            input.ReadMessage(latitude_);
            break;
          }
          case 26: {
            if (altitude_ == null) {
              altitude_ = new global::Fhirbuffs.Decimal();
            }
            input.ReadMessage(altitude_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Coding : pb::IMessage<Coding> {
    private static readonly pb::MessageParser<Coding> _parser = new pb::MessageParser<Coding>(() => new Coding());
    public static pb::MessageParser<Coding> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Coding() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Coding(Coding other) : this() {
      system_ = other.system_;
      version_ = other.version_;
      code_ = other.code_;
      display_ = other.display_;
      userSelected_ = other.userSelected_;
    }

    public Coding Clone() {
      return new Coding(this);
    }

    public const int SystemFieldNumber = 1;
    private string system_ = "";
    public string System {
      get { return system_; }
      set {
        system_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int VersionFieldNumber = 2;
    private string version_ = "";
    public string Version {
      get { return version_; }
      set {
        version_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CodeFieldNumber = 3;
    private string code_ = "";
    public string Code {
      get { return code_; }
      set {
        code_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DisplayFieldNumber = 4;
    private string display_ = "";
    public string Display {
      get { return display_; }
      set {
        display_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int UserSelectedFieldNumber = 5;
    private bool userSelected_;
    public bool UserSelected {
      get { return userSelected_; }
      set {
        userSelected_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Coding);
    }

    public bool Equals(Coding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (System != other.System) return false;
      if (Version != other.Version) return false;
      if (Code != other.Code) return false;
      if (Display != other.Display) return false;
      if (UserSelected != other.UserSelected) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (System.Length != 0) hash ^= System.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Display.Length != 0) hash ^= Display.GetHashCode();
      if (UserSelected != false) hash ^= UserSelected.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (System.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(System);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
      if (Display.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Display);
      }
      if (UserSelected != false) {
        output.WriteRawTag(40);
        output.WriteBool(UserSelected);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (System.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Display.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Display);
      }
      if (UserSelected != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Coding other) {
      if (other == null) {
        return;
      }
      if (other.System.Length != 0) {
        System = other.System;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Display.Length != 0) {
        Display = other.Display;
      }
      if (other.UserSelected != false) {
        UserSelected = other.UserSelected;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            System = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
          case 34: {
            Display = input.ReadString();
            break;
          }
          case 40: {
            UserSelected = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CodeableConcept : pb::IMessage<CodeableConcept> {
    private static readonly pb::MessageParser<CodeableConcept> _parser = new pb::MessageParser<CodeableConcept>(() => new CodeableConcept());
    public static pb::MessageParser<CodeableConcept> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CodeableConcept() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CodeableConcept(CodeableConcept other) : this() {
      coding_ = other.coding_.Clone();
      text_ = other.text_;
    }

    public CodeableConcept Clone() {
      return new CodeableConcept(this);
    }

    public const int CodingFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Fhirbuffs.Coding> _repeated_coding_codec
        = pb::FieldCodec.ForMessage(10, global::Fhirbuffs.Coding.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.Coding> coding_ = new pbc::RepeatedField<global::Fhirbuffs.Coding>();
    public pbc::RepeatedField<global::Fhirbuffs.Coding> Coding {
      get { return coding_; }
    }

    public const int TextFieldNumber = 2;
    private string text_ = "";
    public string Text {
      get { return text_; }
      set {
        text_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CodeableConcept);
    }

    public bool Equals(CodeableConcept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!coding_.Equals(other.coding_)) return false;
      if (Text != other.Text) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= coding_.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      coding_.WriteTo(output, _repeated_coding_codec);
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += coding_.CalculateSize(_repeated_coding_codec);
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    public void MergeFrom(CodeableConcept other) {
      if (other == null) {
        return;
      }
      coding_.Add(other.coding_);
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            coding_.AddEntriesFrom(input, _repeated_coding_codec);
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Period : pb::IMessage<Period> {
    private static readonly pb::MessageParser<Period> _parser = new pb::MessageParser<Period>(() => new Period());
    public static pb::MessageParser<Period> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Period() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Period(Period other) : this() {
      Start = other.start_ != null ? other.Start.Clone() : null;
      End = other.end_ != null ? other.End.Clone() : null;
    }

    public Period Clone() {
      return new Period(this);
    }

    public const int StartFieldNumber = 1;
    private global::Fhirbuffs.Date start_;
    public global::Fhirbuffs.Date Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    public const int EndFieldNumber = 2;
    private global::Fhirbuffs.Date end_;
    public global::Fhirbuffs.Date End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Period);
    }

    public bool Equals(Period other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (start_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(End);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      return size;
    }

    public void MergeFrom(Period other) {
      if (other == null) {
        return;
      }
      if (other.start_ != null) {
        if (start_ == null) {
          start_ = new global::Fhirbuffs.Date();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          end_ = new global::Fhirbuffs.Date();
        }
        End.MergeFrom(other.End);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (start_ == null) {
              start_ = new global::Fhirbuffs.Date();
            }
            input.ReadMessage(start_);
            break;
          }
          case 18: {
            if (end_ == null) {
              end_ = new global::Fhirbuffs.Date();
            }
            input.ReadMessage(end_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Address : pb::IMessage<Address> {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Address(Address other) : this() {
      use_ = other.use_;
      type_ = other.type_;
      text_ = other.text_;
      line_ = other.line_.Clone();
      city_ = other.city_;
      district_ = other.district_;
      state_ = other.state_;
      postalCode_ = other.postalCode_;
      country_ = other.country_;
      Period = other.period_ != null ? other.Period.Clone() : null;
    }

    public Address Clone() {
      return new Address(this);
    }

    public const int UseFieldNumber = 1;
    private global::Fhirbuffs.Address.Types.AddressUses use_ = global::Fhirbuffs.Address.Types.AddressUses.home;
    public global::Fhirbuffs.Address.Types.AddressUses Use {
      get { return use_; }
      set {
        use_ = value;
      }
    }

    public const int TypeFieldNumber = 2;
    private global::Fhirbuffs.Address.Types.AddressTypes type_ = global::Fhirbuffs.Address.Types.AddressTypes.postal;
    public global::Fhirbuffs.Address.Types.AddressTypes Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public const int TextFieldNumber = 3;
    private string text_ = "";
    public string Text {
      get { return text_; }
      set {
        text_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int LineFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_line_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> line_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Line {
      get { return line_; }
    }

    public const int CityFieldNumber = 5;
    private string city_ = "";
    public string City {
      get { return city_; }
      set {
        city_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DistrictFieldNumber = 6;
    private string district_ = "";
    public string District {
      get { return district_; }
      set {
        district_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StateFieldNumber = 7;
    private string state_ = "";
    public string State {
      get { return state_; }
      set {
        state_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PostalCodeFieldNumber = 8;
    private string postalCode_ = "";
    public string PostalCode {
      get { return postalCode_; }
      set {
        postalCode_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CountryFieldNumber = 9;
    private string country_ = "";
    public string Country {
      get { return country_; }
      set {
        country_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PeriodFieldNumber = 10;
    private global::Fhirbuffs.Period period_;
    public global::Fhirbuffs.Period Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Use != other.Use) return false;
      if (Type != other.Type) return false;
      if (Text != other.Text) return false;
      if(!line_.Equals(other.line_)) return false;
      if (City != other.City) return false;
      if (District != other.District) return false;
      if (State != other.State) return false;
      if (PostalCode != other.PostalCode) return false;
      if (Country != other.Country) return false;
      if (!object.Equals(Period, other.Period)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Use != global::Fhirbuffs.Address.Types.AddressUses.home) hash ^= Use.GetHashCode();
      if (Type != global::Fhirbuffs.Address.Types.AddressTypes.postal) hash ^= Type.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      hash ^= line_.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (District.Length != 0) hash ^= District.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (PostalCode.Length != 0) hash ^= PostalCode.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (period_ != null) hash ^= Period.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Use != global::Fhirbuffs.Address.Types.AddressUses.home) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Use);
      }
      if (Type != global::Fhirbuffs.Address.Types.AddressTypes.postal) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      line_.WriteTo(output, _repeated_line_codec);
      if (City.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(City);
      }
      if (District.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(District);
      }
      if (State.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(State);
      }
      if (PostalCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PostalCode);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Country);
      }
      if (period_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Period);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Use != global::Fhirbuffs.Address.Types.AddressUses.home) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Use);
      }
      if (Type != global::Fhirbuffs.Address.Types.AddressTypes.postal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      size += line_.CalculateSize(_repeated_line_codec);
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (District.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(District);
      }
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (PostalCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PostalCode);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (period_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Period);
      }
      return size;
    }

    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.Use != global::Fhirbuffs.Address.Types.AddressUses.home) {
        Use = other.Use;
      }
      if (other.Type != global::Fhirbuffs.Address.Types.AddressTypes.postal) {
        Type = other.Type;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      line_.Add(other.line_);
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.District.Length != 0) {
        District = other.District;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.PostalCode.Length != 0) {
        PostalCode = other.PostalCode;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.period_ != null) {
        if (period_ == null) {
          period_ = new global::Fhirbuffs.Period();
        }
        Period.MergeFrom(other.Period);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            use_ = (global::Fhirbuffs.Address.Types.AddressUses) input.ReadEnum();
            break;
          }
          case 16: {
            type_ = (global::Fhirbuffs.Address.Types.AddressTypes) input.ReadEnum();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 34: {
            line_.AddEntriesFrom(input, _repeated_line_codec);
            break;
          }
          case 42: {
            City = input.ReadString();
            break;
          }
          case 50: {
            District = input.ReadString();
            break;
          }
          case 58: {
            State = input.ReadString();
            break;
          }
          case 66: {
            PostalCode = input.ReadString();
            break;
          }
          case 74: {
            Country = input.ReadString();
            break;
          }
          case 82: {
            if (period_ == null) {
              period_ = new global::Fhirbuffs.Period();
            }
            input.ReadMessage(period_);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum AddressUses {
        home = 0,
        work = 1,
        temp = 2,
        old = 3,
      }

      public enum AddressTypes {
        postal = 0,
        physical = 1,
        both = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HumanName : pb::IMessage<HumanName> {
    private static readonly pb::MessageParser<HumanName> _parser = new pb::MessageParser<HumanName>(() => new HumanName());
    public static pb::MessageParser<HumanName> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public HumanName() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HumanName(HumanName other) : this() {
      use_ = other.use_;
      text_ = other.text_;
      family_ = other.family_.Clone();
      given_ = other.given_.Clone();
      prefix_ = other.prefix_.Clone();
      suffix_ = other.suffix_.Clone();
      Period = other.period_ != null ? other.Period.Clone() : null;
    }

    public HumanName Clone() {
      return new HumanName(this);
    }

    public const int UseFieldNumber = 1;
    private global::Fhirbuffs.HumanName.Types.HumanNameUses use_ = global::Fhirbuffs.HumanName.Types.HumanNameUses.usual;
    public global::Fhirbuffs.HumanName.Types.HumanNameUses Use {
      get { return use_; }
      set {
        use_ = value;
      }
    }

    public const int TextFieldNumber = 2;
    private string text_ = "";
    public string Text {
      get { return text_; }
      set {
        text_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int FamilyFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_family_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> family_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Family {
      get { return family_; }
    }

    public const int GivenFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_given_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> given_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Given {
      get { return given_; }
    }

    public const int PrefixFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_prefix_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> prefix_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Prefix {
      get { return prefix_; }
    }

    public const int SuffixFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_suffix_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> suffix_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Suffix {
      get { return suffix_; }
    }

    public const int PeriodFieldNumber = 7;
    private global::Fhirbuffs.Period period_;
    public global::Fhirbuffs.Period Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as HumanName);
    }

    public bool Equals(HumanName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Use != other.Use) return false;
      if (Text != other.Text) return false;
      if(!family_.Equals(other.family_)) return false;
      if(!given_.Equals(other.given_)) return false;
      if(!prefix_.Equals(other.prefix_)) return false;
      if(!suffix_.Equals(other.suffix_)) return false;
      if (!object.Equals(Period, other.Period)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Use != global::Fhirbuffs.HumanName.Types.HumanNameUses.usual) hash ^= Use.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      hash ^= family_.GetHashCode();
      hash ^= given_.GetHashCode();
      hash ^= prefix_.GetHashCode();
      hash ^= suffix_.GetHashCode();
      if (period_ != null) hash ^= Period.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Use != global::Fhirbuffs.HumanName.Types.HumanNameUses.usual) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Use);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      family_.WriteTo(output, _repeated_family_codec);
      given_.WriteTo(output, _repeated_given_codec);
      prefix_.WriteTo(output, _repeated_prefix_codec);
      suffix_.WriteTo(output, _repeated_suffix_codec);
      if (period_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Period);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Use != global::Fhirbuffs.HumanName.Types.HumanNameUses.usual) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Use);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      size += family_.CalculateSize(_repeated_family_codec);
      size += given_.CalculateSize(_repeated_given_codec);
      size += prefix_.CalculateSize(_repeated_prefix_codec);
      size += suffix_.CalculateSize(_repeated_suffix_codec);
      if (period_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Period);
      }
      return size;
    }

    public void MergeFrom(HumanName other) {
      if (other == null) {
        return;
      }
      if (other.Use != global::Fhirbuffs.HumanName.Types.HumanNameUses.usual) {
        Use = other.Use;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      family_.Add(other.family_);
      given_.Add(other.given_);
      prefix_.Add(other.prefix_);
      suffix_.Add(other.suffix_);
      if (other.period_ != null) {
        if (period_ == null) {
          period_ = new global::Fhirbuffs.Period();
        }
        Period.MergeFrom(other.Period);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            use_ = (global::Fhirbuffs.HumanName.Types.HumanNameUses) input.ReadEnum();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
          case 26: {
            family_.AddEntriesFrom(input, _repeated_family_codec);
            break;
          }
          case 34: {
            given_.AddEntriesFrom(input, _repeated_given_codec);
            break;
          }
          case 42: {
            prefix_.AddEntriesFrom(input, _repeated_prefix_codec);
            break;
          }
          case 50: {
            suffix_.AddEntriesFrom(input, _repeated_suffix_codec);
            break;
          }
          case 58: {
            if (period_ == null) {
              period_ = new global::Fhirbuffs.Period();
            }
            input.ReadMessage(period_);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum HumanNameUses {
        usual = 0,
        official = 1,
        temp = 2,
        nickname = 3,
        anonymous = 4,
        old = 5,
        maiden = 6,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ContactPoint : pb::IMessage<ContactPoint> {
    private static readonly pb::MessageParser<ContactPoint> _parser = new pb::MessageParser<ContactPoint>(() => new ContactPoint());
    public static pb::MessageParser<ContactPoint> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ContactPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ContactPoint(ContactPoint other) : this() {
      authorReference_ = other.authorReference_;
      authorString_ = other.authorString_;
      Time = other.time_ != null ? other.Time.Clone() : null;
      text_ = other.text_;
    }

    public ContactPoint Clone() {
      return new ContactPoint(this);
    }

    public const int AuthorReferenceFieldNumber = 1;
    private global::Fhirbuffs.ContactPoint.Types.AuthorReferences authorReference_ = global::Fhirbuffs.ContactPoint.Types.AuthorReferences.Practitioner;
    public global::Fhirbuffs.ContactPoint.Types.AuthorReferences AuthorReference {
      get { return authorReference_; }
      set {
        authorReference_ = value;
      }
    }

    public const int AuthorStringFieldNumber = 2;
    private string authorString_ = "";
    public string AuthorString {
      get { return authorString_; }
      set {
        authorString_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TimeFieldNumber = 3;
    private global::Fhirbuffs.Date time_;
    public global::Fhirbuffs.Date Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public const int TextFieldNumber = 4;
    private string text_ = "";
    public string Text {
      get { return text_; }
      set {
        text_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ContactPoint);
    }

    public bool Equals(ContactPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthorReference != other.AuthorReference) return false;
      if (AuthorString != other.AuthorString) return false;
      if (!object.Equals(Time, other.Time)) return false;
      if (Text != other.Text) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AuthorReference != global::Fhirbuffs.ContactPoint.Types.AuthorReferences.Practitioner) hash ^= AuthorReference.GetHashCode();
      if (AuthorString.Length != 0) hash ^= AuthorString.GetHashCode();
      if (time_ != null) hash ^= Time.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthorReference != global::Fhirbuffs.ContactPoint.Types.AuthorReferences.Practitioner) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AuthorReference);
      }
      if (AuthorString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AuthorString);
      }
      if (time_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Time);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AuthorReference != global::Fhirbuffs.ContactPoint.Types.AuthorReferences.Practitioner) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuthorReference);
      }
      if (AuthorString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorString);
      }
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    public void MergeFrom(ContactPoint other) {
      if (other == null) {
        return;
      }
      if (other.AuthorReference != global::Fhirbuffs.ContactPoint.Types.AuthorReferences.Practitioner) {
        AuthorReference = other.AuthorReference;
      }
      if (other.AuthorString.Length != 0) {
        AuthorString = other.AuthorString;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          time_ = new global::Fhirbuffs.Date();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            authorReference_ = (global::Fhirbuffs.ContactPoint.Types.AuthorReferences) input.ReadEnum();
            break;
          }
          case 18: {
            AuthorString = input.ReadString();
            break;
          }
          case 26: {
            if (time_ == null) {
              time_ = new global::Fhirbuffs.Date();
            }
            input.ReadMessage(time_);
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum AuthorReferences {
        Practitioner = 0,
        Patient = 1,
        RelatedPerson = 2,
        Other = 3,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Contact : pb::IMessage<Contact> {
    private static readonly pb::MessageParser<Contact> _parser = new pb::MessageParser<Contact>(() => new Contact());
    public static pb::MessageParser<Contact> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Contact() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Contact(Contact other) : this() {
      Purpose = other.purpose_ != null ? other.Purpose.Clone() : null;
      Name = other.name_ != null ? other.Name.Clone() : null;
      telecom_ = other.telecom_.Clone();
      Address = other.address_ != null ? other.Address.Clone() : null;
    }

    public Contact Clone() {
      return new Contact(this);
    }

    public const int PurposeFieldNumber = 1;
    private global::Fhirbuffs.CodeableConcept purpose_;
    public global::Fhirbuffs.CodeableConcept Purpose {
      get { return purpose_; }
      set {
        purpose_ = value;
      }
    }

    public const int NameFieldNumber = 2;
    private global::Fhirbuffs.HumanName name_;
    public global::Fhirbuffs.HumanName Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    public const int TelecomFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Fhirbuffs.ContactPoint> _repeated_telecom_codec
        = pb::FieldCodec.ForMessage(26, global::Fhirbuffs.ContactPoint.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.ContactPoint> telecom_ = new pbc::RepeatedField<global::Fhirbuffs.ContactPoint>();
    public pbc::RepeatedField<global::Fhirbuffs.ContactPoint> Telecom {
      get { return telecom_; }
    }

    public const int AddressFieldNumber = 4;
    private global::Fhirbuffs.Address address_;
    public global::Fhirbuffs.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Contact);
    }

    public bool Equals(Contact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Purpose, other.Purpose)) return false;
      if (!object.Equals(Name, other.Name)) return false;
      if(!telecom_.Equals(other.telecom_)) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (purpose_ != null) hash ^= Purpose.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      hash ^= telecom_.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (purpose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Purpose);
      }
      if (name_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Name);
      }
      telecom_.WriteTo(output, _repeated_telecom_codec);
      if (address_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Address);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (purpose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Purpose);
      }
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      size += telecom_.CalculateSize(_repeated_telecom_codec);
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      return size;
    }

    public void MergeFrom(Contact other) {
      if (other == null) {
        return;
      }
      if (other.purpose_ != null) {
        if (purpose_ == null) {
          purpose_ = new global::Fhirbuffs.CodeableConcept();
        }
        Purpose.MergeFrom(other.Purpose);
      }
      if (other.name_ != null) {
        if (name_ == null) {
          name_ = new global::Fhirbuffs.HumanName();
        }
        Name.MergeFrom(other.Name);
      }
      telecom_.Add(other.telecom_);
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Fhirbuffs.Address();
        }
        Address.MergeFrom(other.Address);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (purpose_ == null) {
              purpose_ = new global::Fhirbuffs.CodeableConcept();
            }
            input.ReadMessage(purpose_);
            break;
          }
          case 18: {
            if (name_ == null) {
              name_ = new global::Fhirbuffs.HumanName();
            }
            input.ReadMessage(name_);
            break;
          }
          case 26: {
            telecom_.AddEntriesFrom(input, _repeated_telecom_codec);
            break;
          }
          case 34: {
            if (address_ == null) {
              address_ = new global::Fhirbuffs.Address();
            }
            input.ReadMessage(address_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Identifier : pb::IMessage<Identifier> {
    private static readonly pb::MessageParser<Identifier> _parser = new pb::MessageParser<Identifier>(() => new Identifier());
    public static pb::MessageParser<Identifier> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Identifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Identifier(Identifier other) : this() {
      use_ = other.use_;
      type_ = other.type_.Clone();
      system_ = other.system_;
      value_ = other.value_;
      Period = other.period_ != null ? other.Period.Clone() : null;
      assigner_ = other.assigner_.Clone();
    }

    public Identifier Clone() {
      return new Identifier(this);
    }

    public const int UseFieldNumber = 1;
    private global::Fhirbuffs.Identifier.Types.IdentifierUses use_ = global::Fhirbuffs.Identifier.Types.IdentifierUses.Usual;
    public global::Fhirbuffs.Identifier.Types.IdentifierUses Use {
      get { return use_; }
      set {
        use_ = value;
      }
    }

    public const int TypeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Fhirbuffs.CodeableConcept> _repeated_type_codec
        = pb::FieldCodec.ForMessage(18, global::Fhirbuffs.CodeableConcept.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.CodeableConcept> type_ = new pbc::RepeatedField<global::Fhirbuffs.CodeableConcept>();
    public pbc::RepeatedField<global::Fhirbuffs.CodeableConcept> Type {
      get { return type_; }
    }

    public const int SystemFieldNumber = 3;
    private string system_ = "";
    public string System {
      get { return system_; }
      set {
        system_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ValueFieldNumber = 4;
    private string value_ = "";
    public string Value {
      get { return value_; }
      set {
        value_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PeriodFieldNumber = 5;
    private global::Fhirbuffs.Period period_;
    public global::Fhirbuffs.Period Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    public const int AssignerFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Fhirbuffs.Organization> _repeated_assigner_codec
        = pb::FieldCodec.ForMessage(50, global::Fhirbuffs.Organization.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.Organization> assigner_ = new pbc::RepeatedField<global::Fhirbuffs.Organization>();
    public pbc::RepeatedField<global::Fhirbuffs.Organization> Assigner {
      get { return assigner_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Identifier);
    }

    public bool Equals(Identifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Use != other.Use) return false;
      if(!type_.Equals(other.type_)) return false;
      if (System != other.System) return false;
      if (Value != other.Value) return false;
      if (!object.Equals(Period, other.Period)) return false;
      if(!assigner_.Equals(other.assigner_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Use != global::Fhirbuffs.Identifier.Types.IdentifierUses.Usual) hash ^= Use.GetHashCode();
      hash ^= type_.GetHashCode();
      if (System.Length != 0) hash ^= System.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (period_ != null) hash ^= Period.GetHashCode();
      hash ^= assigner_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Use != global::Fhirbuffs.Identifier.Types.IdentifierUses.Usual) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Use);
      }
      type_.WriteTo(output, _repeated_type_codec);
      if (System.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(System);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Value);
      }
      if (period_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Period);
      }
      assigner_.WriteTo(output, _repeated_assigner_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Use != global::Fhirbuffs.Identifier.Types.IdentifierUses.Usual) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Use);
      }
      size += type_.CalculateSize(_repeated_type_codec);
      if (System.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (period_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Period);
      }
      size += assigner_.CalculateSize(_repeated_assigner_codec);
      return size;
    }

    public void MergeFrom(Identifier other) {
      if (other == null) {
        return;
      }
      if (other.Use != global::Fhirbuffs.Identifier.Types.IdentifierUses.Usual) {
        Use = other.Use;
      }
      type_.Add(other.type_);
      if (other.System.Length != 0) {
        System = other.System;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.period_ != null) {
        if (period_ == null) {
          period_ = new global::Fhirbuffs.Period();
        }
        Period.MergeFrom(other.Period);
      }
      assigner_.Add(other.assigner_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            use_ = (global::Fhirbuffs.Identifier.Types.IdentifierUses) input.ReadEnum();
            break;
          }
          case 18: {
            type_.AddEntriesFrom(input, _repeated_type_codec);
            break;
          }
          case 26: {
            System = input.ReadString();
            break;
          }
          case 34: {
            Value = input.ReadString();
            break;
          }
          case 42: {
            if (period_ == null) {
              period_ = new global::Fhirbuffs.Period();
            }
            input.ReadMessage(period_);
            break;
          }
          case 50: {
            assigner_.AddEntriesFrom(input, _repeated_assigner_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum IdentifierUses {
        Usual = 0,
        Official = 1,
        Temp = 2,
        Secondary = 3,
        Unknown = 4,
        Other = 5,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Organization : pb::IMessage<Organization> {
    private static readonly pb::MessageParser<Organization> _parser = new pb::MessageParser<Organization>(() => new Organization());
    public static pb::MessageParser<Organization> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Organization() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Organization(Organization other) : this() {
      identifier_ = other.identifier_.Clone();
      active_ = other.active_;
      Type = other.type_ != null ? other.Type.Clone() : null;
      name_ = other.name_;
      telecom_ = other.telecom_.Clone();
      address_ = other.address_.Clone();
      PartOf = other.partOf_ != null ? other.PartOf.Clone() : null;
      contact_ = other.contact_.Clone();
    }

    public Organization Clone() {
      return new Organization(this);
    }

    public const int IdentifierFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Fhirbuffs.Identifier> _repeated_identifier_codec
        = pb::FieldCodec.ForMessage(10, global::Fhirbuffs.Identifier.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.Identifier> identifier_ = new pbc::RepeatedField<global::Fhirbuffs.Identifier>();
    public pbc::RepeatedField<global::Fhirbuffs.Identifier> Identifier {
      get { return identifier_; }
    }

    public const int ActiveFieldNumber = 2;
    private bool active_;
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    public const int TypeFieldNumber = 3;
    private global::Fhirbuffs.CodeableConcept type_;
    public global::Fhirbuffs.CodeableConcept Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public const int NameFieldNumber = 4;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TelecomFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Fhirbuffs.ContactPoint> _repeated_telecom_codec
        = pb::FieldCodec.ForMessage(42, global::Fhirbuffs.ContactPoint.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.ContactPoint> telecom_ = new pbc::RepeatedField<global::Fhirbuffs.ContactPoint>();
    public pbc::RepeatedField<global::Fhirbuffs.ContactPoint> Telecom {
      get { return telecom_; }
    }

    public const int AddressFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Fhirbuffs.Address> _repeated_address_codec
        = pb::FieldCodec.ForMessage(50, global::Fhirbuffs.Address.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.Address> address_ = new pbc::RepeatedField<global::Fhirbuffs.Address>();
    public pbc::RepeatedField<global::Fhirbuffs.Address> Address {
      get { return address_; }
    }

    public const int PartOfFieldNumber = 7;
    private global::Fhirbuffs.Organization partOf_;
    public global::Fhirbuffs.Organization PartOf {
      get { return partOf_; }
      set {
        partOf_ = value;
      }
    }

    public const int ContactFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Fhirbuffs.Contact> _repeated_contact_codec
        = pb::FieldCodec.ForMessage(66, global::Fhirbuffs.Contact.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.Contact> contact_ = new pbc::RepeatedField<global::Fhirbuffs.Contact>();
    public pbc::RepeatedField<global::Fhirbuffs.Contact> Contact {
      get { return contact_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Organization);
    }

    public bool Equals(Organization other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!identifier_.Equals(other.identifier_)) return false;
      if (Active != other.Active) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (Name != other.Name) return false;
      if(!telecom_.Equals(other.telecom_)) return false;
      if(!address_.Equals(other.address_)) return false;
      if (!object.Equals(PartOf, other.PartOf)) return false;
      if(!contact_.Equals(other.contact_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= identifier_.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= telecom_.GetHashCode();
      hash ^= address_.GetHashCode();
      if (partOf_ != null) hash ^= PartOf.GetHashCode();
      hash ^= contact_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      identifier_.WriteTo(output, _repeated_identifier_codec);
      if (Active != false) {
        output.WriteRawTag(16);
        output.WriteBool(Active);
      }
      if (type_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      telecom_.WriteTo(output, _repeated_telecom_codec);
      address_.WriteTo(output, _repeated_address_codec);
      if (partOf_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PartOf);
      }
      contact_.WriteTo(output, _repeated_contact_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += identifier_.CalculateSize(_repeated_identifier_codec);
      if (Active != false) {
        size += 1 + 1;
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += telecom_.CalculateSize(_repeated_telecom_codec);
      size += address_.CalculateSize(_repeated_address_codec);
      if (partOf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartOf);
      }
      size += contact_.CalculateSize(_repeated_contact_codec);
      return size;
    }

    public void MergeFrom(Organization other) {
      if (other == null) {
        return;
      }
      identifier_.Add(other.identifier_);
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::Fhirbuffs.CodeableConcept();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      telecom_.Add(other.telecom_);
      address_.Add(other.address_);
      if (other.partOf_ != null) {
        if (partOf_ == null) {
          partOf_ = new global::Fhirbuffs.Organization();
        }
        PartOf.MergeFrom(other.PartOf);
      }
      contact_.Add(other.contact_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            identifier_.AddEntriesFrom(input, _repeated_identifier_codec);
            break;
          }
          case 16: {
            Active = input.ReadBool();
            break;
          }
          case 26: {
            if (type_ == null) {
              type_ = new global::Fhirbuffs.CodeableConcept();
            }
            input.ReadMessage(type_);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            telecom_.AddEntriesFrom(input, _repeated_telecom_codec);
            break;
          }
          case 50: {
            address_.AddEntriesFrom(input, _repeated_address_codec);
            break;
          }
          case 58: {
            if (partOf_ == null) {
              partOf_ = new global::Fhirbuffs.Organization();
            }
            input.ReadMessage(partOf_);
            break;
          }
          case 66: {
            contact_.AddEntriesFrom(input, _repeated_contact_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Attachment : pb::IMessage<Attachment> {
    private static readonly pb::MessageParser<Attachment> _parser = new pb::MessageParser<Attachment>(() => new Attachment());
    public static pb::MessageParser<Attachment> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Attachment() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Attachment(Attachment other) : this() {
      contentType_ = other.contentType_;
      language_ = other.language_;
      data_ = other.data_;
      url_ = other.url_;
      size_ = other.size_;
      hash_ = other.hash_;
      title_ = other.title_;
      Creation = other.creation_ != null ? other.Creation.Clone() : null;
    }

    public Attachment Clone() {
      return new Attachment(this);
    }

    public const int ContentTypeFieldNumber = 1;
    private string contentType_ = "";
    public string ContentType {
      get { return contentType_; }
      set {
        contentType_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int LanguageFieldNumber = 2;
    private string language_ = "";
    public string Language {
      get { return language_; }
      set {
        language_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int UrlFieldNumber = 4;
    private string url_ = "";
    public string Url {
      get { return url_; }
      set {
        url_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SizeFieldNumber = 5;
    private uint size_;
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    public const int HashFieldNumber = 6;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TitleFieldNumber = 7;
    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CreationFieldNumber = 8;
    private global::Fhirbuffs.Date creation_;
    public global::Fhirbuffs.Date Creation {
      get { return creation_; }
      set {
        creation_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Attachment);
    }

    public bool Equals(Attachment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContentType != other.ContentType) return false;
      if (Language != other.Language) return false;
      if (Data != other.Data) return false;
      if (Url != other.Url) return false;
      if (Size != other.Size) return false;
      if (Hash != other.Hash) return false;
      if (Title != other.Title) return false;
      if (!object.Equals(Creation, other.Creation)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ContentType.Length != 0) hash ^= ContentType.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (creation_ != null) hash ^= Creation.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ContentType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContentType);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Url);
      }
      if (Size != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Size);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Hash);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Title);
      }
      if (creation_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Creation);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ContentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (creation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creation);
      }
      return size;
    }

    public void MergeFrom(Attachment other) {
      if (other == null) {
        return;
      }
      if (other.ContentType.Length != 0) {
        ContentType = other.ContentType;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.creation_ != null) {
        if (creation_ == null) {
          creation_ = new global::Fhirbuffs.Date();
        }
        Creation.MergeFrom(other.Creation);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ContentType = input.ReadString();
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 34: {
            Url = input.ReadString();
            break;
          }
          case 40: {
            Size = input.ReadUInt32();
            break;
          }
          case 50: {
            Hash = input.ReadBytes();
            break;
          }
          case 58: {
            Title = input.ReadString();
            break;
          }
          case 66: {
            if (creation_ == null) {
              creation_ = new global::Fhirbuffs.Date();
            }
            input.ReadMessage(creation_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Link : pb::IMessage<Link> {
    private static readonly pb::MessageParser<Link> _parser = new pb::MessageParser<Link>(() => new Link());
    public static pb::MessageParser<Link> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Link() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Link(Link other) : this() {
      target_ = other.target_;
      assurance_ = other.assurance_;
    }

    public Link Clone() {
      return new Link(this);
    }

    public const int TargetFieldNumber = 1;
    private global::Fhirbuffs.Link.Types.LinkTarget target_ = global::Fhirbuffs.Link.Types.LinkTarget.Patient;
    public global::Fhirbuffs.Link.Types.LinkTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    public const int AssuranceFieldNumber = 2;
    private global::Fhirbuffs.Link.Types.LinkAssurance assurance_ = global::Fhirbuffs.Link.Types.LinkAssurance.unknown;
    public global::Fhirbuffs.Link.Types.LinkAssurance Assurance {
      get { return assurance_; }
      set {
        assurance_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Link);
    }

    public bool Equals(Link other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Target != other.Target) return false;
      if (Assurance != other.Assurance) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Target != global::Fhirbuffs.Link.Types.LinkTarget.Patient) hash ^= Target.GetHashCode();
      if (Assurance != global::Fhirbuffs.Link.Types.LinkAssurance.unknown) hash ^= Assurance.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Target != global::Fhirbuffs.Link.Types.LinkTarget.Patient) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Target);
      }
      if (Assurance != global::Fhirbuffs.Link.Types.LinkAssurance.unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Assurance);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Target != global::Fhirbuffs.Link.Types.LinkTarget.Patient) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Target);
      }
      if (Assurance != global::Fhirbuffs.Link.Types.LinkAssurance.unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Assurance);
      }
      return size;
    }

    public void MergeFrom(Link other) {
      if (other == null) {
        return;
      }
      if (other.Target != global::Fhirbuffs.Link.Types.LinkTarget.Patient) {
        Target = other.Target;
      }
      if (other.Assurance != global::Fhirbuffs.Link.Types.LinkAssurance.unknown) {
        Assurance = other.Assurance;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            target_ = (global::Fhirbuffs.Link.Types.LinkTarget) input.ReadEnum();
            break;
          }
          case 16: {
            assurance_ = (global::Fhirbuffs.Link.Types.LinkAssurance) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum LinkTarget {
        Patient = 0,
        Practitioner = 1,
        RelatedPerson = 2,
        Person = 3,
      }

      public enum LinkAssurance {
        unknown = 0,
        level1 = 1,
        level2 = 2,
        level3 = 3,
        level4 = 4,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Quantity : pb::IMessage<Quantity> {
    private static readonly pb::MessageParser<Quantity> _parser = new pb::MessageParser<Quantity>(() => new Quantity());
    public static pb::MessageParser<Quantity> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Quantity() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Quantity(Quantity other) : this() {
      Value = other.value_ != null ? other.Value.Clone() : null;
      comparator_ = other.comparator_;
      unit_ = other.unit_;
      system_ = other.system_;
      code_ = other.code_;
    }

    public Quantity Clone() {
      return new Quantity(this);
    }

    public const int ValueFieldNumber = 1;
    private global::Fhirbuffs.Decimal value_;
    public global::Fhirbuffs.Decimal Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public const int ComparatorFieldNumber = 2;
    private string comparator_ = "";
    public string Comparator {
      get { return comparator_; }
      set {
        comparator_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int UnitFieldNumber = 3;
    private string unit_ = "";
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SystemFieldNumber = 4;
    private string system_ = "";
    public string System {
      get { return system_; }
      set {
        system_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CodeFieldNumber = 5;
    private string code_ = "";
    public string Code {
      get { return code_; }
      set {
        code_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Quantity);
    }

    public bool Equals(Quantity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Value, other.Value)) return false;
      if (Comparator != other.Comparator) return false;
      if (Unit != other.Unit) return false;
      if (System != other.System) return false;
      if (Code != other.Code) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (value_ != null) hash ^= Value.GetHashCode();
      if (Comparator.Length != 0) hash ^= Comparator.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (System.Length != 0) hash ^= System.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (value_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (Comparator.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Comparator);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Unit);
      }
      if (System.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(System);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Code);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (Comparator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comparator);
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (System.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      return size;
    }

    public void MergeFrom(Quantity other) {
      if (other == null) {
        return;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Fhirbuffs.Decimal();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.Comparator.Length != 0) {
        Comparator = other.Comparator;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.System.Length != 0) {
        System = other.System;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (value_ == null) {
              value_ = new global::Fhirbuffs.Decimal();
            }
            input.ReadMessage(value_);
            break;
          }
          case 18: {
            Comparator = input.ReadString();
            break;
          }
          case 26: {
            Unit = input.ReadString();
            break;
          }
          case 34: {
            System = input.ReadString();
            break;
          }
          case 42: {
            Code = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Ratio : pb::IMessage<Ratio> {
    private static readonly pb::MessageParser<Ratio> _parser = new pb::MessageParser<Ratio>(() => new Ratio());
    public static pb::MessageParser<Ratio> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Ratio() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Ratio(Ratio other) : this() {
      Numerator = other.numerator_ != null ? other.Numerator.Clone() : null;
      Denominator = other.denominator_ != null ? other.Denominator.Clone() : null;
    }

    public Ratio Clone() {
      return new Ratio(this);
    }

    public const int NumeratorFieldNumber = 1;
    private global::Fhirbuffs.Quantity numerator_;
    public global::Fhirbuffs.Quantity Numerator {
      get { return numerator_; }
      set {
        numerator_ = value;
      }
    }

    public const int DenominatorFieldNumber = 2;
    private global::Fhirbuffs.Quantity denominator_;
    public global::Fhirbuffs.Quantity Denominator {
      get { return denominator_; }
      set {
        denominator_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Ratio);
    }

    public bool Equals(Ratio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Numerator, other.Numerator)) return false;
      if (!object.Equals(Denominator, other.Denominator)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (numerator_ != null) hash ^= Numerator.GetHashCode();
      if (denominator_ != null) hash ^= Denominator.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (numerator_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Numerator);
      }
      if (denominator_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Denominator);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (numerator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Numerator);
      }
      if (denominator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Denominator);
      }
      return size;
    }

    public void MergeFrom(Ratio other) {
      if (other == null) {
        return;
      }
      if (other.numerator_ != null) {
        if (numerator_ == null) {
          numerator_ = new global::Fhirbuffs.Quantity();
        }
        Numerator.MergeFrom(other.Numerator);
      }
      if (other.denominator_ != null) {
        if (denominator_ == null) {
          denominator_ = new global::Fhirbuffs.Quantity();
        }
        Denominator.MergeFrom(other.Denominator);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (numerator_ == null) {
              numerator_ = new global::Fhirbuffs.Quantity();
            }
            input.ReadMessage(numerator_);
            break;
          }
          case 18: {
            if (denominator_ == null) {
              denominator_ = new global::Fhirbuffs.Quantity();
            }
            input.ReadMessage(denominator_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Instance : pb::IMessage<Instance> {
    private static readonly pb::MessageParser<Instance> _parser = new pb::MessageParser<Instance>(() => new Instance());
    public static pb::MessageParser<Instance> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Instance() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Instance(Instance other) : this() {
      Identifier = other.identifier_ != null ? other.Identifier.Clone() : null;
      Expiry = other.expiry_ != null ? other.Expiry.Clone() : null;
      Quantity = other.quantity_ != null ? other.Quantity.Clone() : null;
    }

    public Instance Clone() {
      return new Instance(this);
    }

    public const int IdentifierFieldNumber = 1;
    private global::Fhirbuffs.Identifier identifier_;
    public global::Fhirbuffs.Identifier Identifier {
      get { return identifier_; }
      set {
        identifier_ = value;
      }
    }

    public const int ExpiryFieldNumber = 2;
    private global::Fhirbuffs.Date expiry_;
    public global::Fhirbuffs.Date Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    public const int QuantityFieldNumber = 3;
    private global::Fhirbuffs.Quantity quantity_;
    public global::Fhirbuffs.Quantity Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Instance);
    }

    public bool Equals(Instance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identifier, other.Identifier)) return false;
      if (!object.Equals(Expiry, other.Expiry)) return false;
      if (!object.Equals(Quantity, other.Quantity)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (identifier_ != null) hash ^= Identifier.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (quantity_ != null) hash ^= Quantity.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (identifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identifier);
      }
      if (expiry_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expiry);
      }
      if (quantity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Quantity);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (identifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
      }
      if (expiry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expiry);
      }
      if (quantity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Quantity);
      }
      return size;
    }

    public void MergeFrom(Instance other) {
      if (other == null) {
        return;
      }
      if (other.identifier_ != null) {
        if (identifier_ == null) {
          identifier_ = new global::Fhirbuffs.Identifier();
        }
        Identifier.MergeFrom(other.Identifier);
      }
      if (other.expiry_ != null) {
        if (expiry_ == null) {
          expiry_ = new global::Fhirbuffs.Date();
        }
        Expiry.MergeFrom(other.Expiry);
      }
      if (other.quantity_ != null) {
        if (quantity_ == null) {
          quantity_ = new global::Fhirbuffs.Quantity();
        }
        Quantity.MergeFrom(other.Quantity);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (identifier_ == null) {
              identifier_ = new global::Fhirbuffs.Identifier();
            }
            input.ReadMessage(identifier_);
            break;
          }
          case 18: {
            if (expiry_ == null) {
              expiry_ = new global::Fhirbuffs.Date();
            }
            input.ReadMessage(expiry_);
            break;
          }
          case 26: {
            if (quantity_ == null) {
              quantity_ = new global::Fhirbuffs.Quantity();
            }
            input.ReadMessage(quantity_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServiceType : pb::IMessage<ServiceType> {
    private static readonly pb::MessageParser<ServiceType> _parser = new pb::MessageParser<ServiceType>(() => new ServiceType());
    public static pb::MessageParser<ServiceType> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ServiceType() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ServiceType(ServiceType other) : this() {
      Type = other.type_ != null ? other.Type.Clone() : null;
      Specialty = other.specialty_ != null ? other.Specialty.Clone() : null;
    }

    public ServiceType Clone() {
      return new ServiceType(this);
    }

    public const int TypeFieldNumber = 1;
    private global::Fhirbuffs.CodeableConcept type_;
    public global::Fhirbuffs.CodeableConcept Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public const int SpecialtyFieldNumber = 2;
    private global::Fhirbuffs.CodeableConcept specialty_;
    public global::Fhirbuffs.CodeableConcept Specialty {
      get { return specialty_; }
      set {
        specialty_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ServiceType);
    }

    public bool Equals(ServiceType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Type, other.Type)) return false;
      if (!object.Equals(Specialty, other.Specialty)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (type_ != null) hash ^= Type.GetHashCode();
      if (specialty_ != null) hash ^= Specialty.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (type_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Type);
      }
      if (specialty_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Specialty);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (specialty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Specialty);
      }
      return size;
    }

    public void MergeFrom(ServiceType other) {
      if (other == null) {
        return;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::Fhirbuffs.CodeableConcept();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.specialty_ != null) {
        if (specialty_ == null) {
          specialty_ = new global::Fhirbuffs.CodeableConcept();
        }
        Specialty.MergeFrom(other.Specialty);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (type_ == null) {
              type_ = new global::Fhirbuffs.CodeableConcept();
            }
            input.ReadMessage(type_);
            break;
          }
          case 18: {
            if (specialty_ == null) {
              specialty_ = new global::Fhirbuffs.CodeableConcept();
            }
            input.ReadMessage(specialty_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AvailableTime : pb::IMessage<AvailableTime> {
    private static readonly pb::MessageParser<AvailableTime> _parser = new pb::MessageParser<AvailableTime>(() => new AvailableTime());
    public static pb::MessageParser<AvailableTime> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AvailableTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AvailableTime(AvailableTime other) : this() {
      daysOfWeek_ = other.daysOfWeek_;
      allDay_ = other.allDay_;
      availableStartTime_ = other.availableStartTime_;
      availableEndTime_ = other.availableEndTime_;
    }

    public AvailableTime Clone() {
      return new AvailableTime(this);
    }

    public const int DaysOfWeekFieldNumber = 1;
    private global::Fhirbuffs.Days daysOfWeek_ = global::Fhirbuffs.Days.sunday;
    public global::Fhirbuffs.Days DaysOfWeek {
      get { return daysOfWeek_; }
      set {
        daysOfWeek_ = value;
      }
    }

    public const int AllDayFieldNumber = 2;
    private bool allDay_;
    public bool AllDay {
      get { return allDay_; }
      set {
        allDay_ = value;
      }
    }

    public const int AvailableStartTimeFieldNumber = 3;
    private uint availableStartTime_;
    public uint AvailableStartTime {
      get { return availableStartTime_; }
      set {
        availableStartTime_ = value;
      }
    }

    public const int AvailableEndTimeFieldNumber = 4;
    private uint availableEndTime_;
    public uint AvailableEndTime {
      get { return availableEndTime_; }
      set {
        availableEndTime_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AvailableTime);
    }

    public bool Equals(AvailableTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DaysOfWeek != other.DaysOfWeek) return false;
      if (AllDay != other.AllDay) return false;
      if (AvailableStartTime != other.AvailableStartTime) return false;
      if (AvailableEndTime != other.AvailableEndTime) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (DaysOfWeek != global::Fhirbuffs.Days.sunday) hash ^= DaysOfWeek.GetHashCode();
      if (AllDay != false) hash ^= AllDay.GetHashCode();
      if (AvailableStartTime != 0) hash ^= AvailableStartTime.GetHashCode();
      if (AvailableEndTime != 0) hash ^= AvailableEndTime.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DaysOfWeek != global::Fhirbuffs.Days.sunday) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DaysOfWeek);
      }
      if (AllDay != false) {
        output.WriteRawTag(16);
        output.WriteBool(AllDay);
      }
      if (AvailableStartTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AvailableStartTime);
      }
      if (AvailableEndTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AvailableEndTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (DaysOfWeek != global::Fhirbuffs.Days.sunday) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DaysOfWeek);
      }
      if (AllDay != false) {
        size += 1 + 1;
      }
      if (AvailableStartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvailableStartTime);
      }
      if (AvailableEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvailableEndTime);
      }
      return size;
    }

    public void MergeFrom(AvailableTime other) {
      if (other == null) {
        return;
      }
      if (other.DaysOfWeek != global::Fhirbuffs.Days.sunday) {
        DaysOfWeek = other.DaysOfWeek;
      }
      if (other.AllDay != false) {
        AllDay = other.AllDay;
      }
      if (other.AvailableStartTime != 0) {
        AvailableStartTime = other.AvailableStartTime;
      }
      if (other.AvailableEndTime != 0) {
        AvailableEndTime = other.AvailableEndTime;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            daysOfWeek_ = (global::Fhirbuffs.Days) input.ReadEnum();
            break;
          }
          case 16: {
            AllDay = input.ReadBool();
            break;
          }
          case 24: {
            AvailableStartTime = input.ReadUInt32();
            break;
          }
          case 32: {
            AvailableEndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NotAvailableTime : pb::IMessage<NotAvailableTime> {
    private static readonly pb::MessageParser<NotAvailableTime> _parser = new pb::MessageParser<NotAvailableTime>(() => new NotAvailableTime());
    public static pb::MessageParser<NotAvailableTime> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NotAvailableTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NotAvailableTime(NotAvailableTime other) : this() {
      daysOfWeek_ = other.daysOfWeek_;
      allDay_ = other.allDay_;
      availableStartTime_ = other.availableStartTime_;
      availableEndTime_ = other.availableEndTime_;
    }

    public NotAvailableTime Clone() {
      return new NotAvailableTime(this);
    }

    public const int DaysOfWeekFieldNumber = 1;
    private global::Fhirbuffs.Days daysOfWeek_ = global::Fhirbuffs.Days.sunday;
    public global::Fhirbuffs.Days DaysOfWeek {
      get { return daysOfWeek_; }
      set {
        daysOfWeek_ = value;
      }
    }

    public const int AllDayFieldNumber = 2;
    private bool allDay_;
    public bool AllDay {
      get { return allDay_; }
      set {
        allDay_ = value;
      }
    }

    public const int AvailableStartTimeFieldNumber = 3;
    private uint availableStartTime_;
    public uint AvailableStartTime {
      get { return availableStartTime_; }
      set {
        availableStartTime_ = value;
      }
    }

    public const int AvailableEndTimeFieldNumber = 4;
    private uint availableEndTime_;
    public uint AvailableEndTime {
      get { return availableEndTime_; }
      set {
        availableEndTime_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NotAvailableTime);
    }

    public bool Equals(NotAvailableTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DaysOfWeek != other.DaysOfWeek) return false;
      if (AllDay != other.AllDay) return false;
      if (AvailableStartTime != other.AvailableStartTime) return false;
      if (AvailableEndTime != other.AvailableEndTime) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (DaysOfWeek != global::Fhirbuffs.Days.sunday) hash ^= DaysOfWeek.GetHashCode();
      if (AllDay != false) hash ^= AllDay.GetHashCode();
      if (AvailableStartTime != 0) hash ^= AvailableStartTime.GetHashCode();
      if (AvailableEndTime != 0) hash ^= AvailableEndTime.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DaysOfWeek != global::Fhirbuffs.Days.sunday) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DaysOfWeek);
      }
      if (AllDay != false) {
        output.WriteRawTag(16);
        output.WriteBool(AllDay);
      }
      if (AvailableStartTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AvailableStartTime);
      }
      if (AvailableEndTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AvailableEndTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (DaysOfWeek != global::Fhirbuffs.Days.sunday) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DaysOfWeek);
      }
      if (AllDay != false) {
        size += 1 + 1;
      }
      if (AvailableStartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvailableStartTime);
      }
      if (AvailableEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvailableEndTime);
      }
      return size;
    }

    public void MergeFrom(NotAvailableTime other) {
      if (other == null) {
        return;
      }
      if (other.DaysOfWeek != global::Fhirbuffs.Days.sunday) {
        DaysOfWeek = other.DaysOfWeek;
      }
      if (other.AllDay != false) {
        AllDay = other.AllDay;
      }
      if (other.AvailableStartTime != 0) {
        AvailableStartTime = other.AvailableStartTime;
      }
      if (other.AvailableEndTime != 0) {
        AvailableEndTime = other.AvailableEndTime;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            daysOfWeek_ = (global::Fhirbuffs.Days) input.ReadEnum();
            break;
          }
          case 16: {
            AllDay = input.ReadBool();
            break;
          }
          case 24: {
            AvailableStartTime = input.ReadUInt32();
            break;
          }
          case 32: {
            AvailableEndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Qualifications : pb::IMessage<Qualifications> {
    private static readonly pb::MessageParser<Qualifications> _parser = new pb::MessageParser<Qualifications>(() => new Qualifications());
    public static pb::MessageParser<Qualifications> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Primitives.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Qualifications() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Qualifications(Qualifications other) : this() {
      identifier_ = other.identifier_.Clone();
      Code = other.code_ != null ? other.Code.Clone() : null;
      Period = other.period_ != null ? other.Period.Clone() : null;
      Issuer = other.issuer_ != null ? other.Issuer.Clone() : null;
    }

    public Qualifications Clone() {
      return new Qualifications(this);
    }

    public const int IdentifierFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Fhirbuffs.Identifier> _repeated_identifier_codec
        = pb::FieldCodec.ForMessage(10, global::Fhirbuffs.Identifier.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.Identifier> identifier_ = new pbc::RepeatedField<global::Fhirbuffs.Identifier>();
    public pbc::RepeatedField<global::Fhirbuffs.Identifier> Identifier {
      get { return identifier_; }
    }

    public const int CodeFieldNumber = 2;
    private global::Fhirbuffs.CodeableConcept code_;
    public global::Fhirbuffs.CodeableConcept Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    public const int PeriodFieldNumber = 3;
    private global::Fhirbuffs.Period period_;
    public global::Fhirbuffs.Period Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    public const int IssuerFieldNumber = 4;
    private global::Fhirbuffs.Organization issuer_;
    public global::Fhirbuffs.Organization Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Qualifications);
    }

    public bool Equals(Qualifications other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!identifier_.Equals(other.identifier_)) return false;
      if (!object.Equals(Code, other.Code)) return false;
      if (!object.Equals(Period, other.Period)) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= identifier_.GetHashCode();
      if (code_ != null) hash ^= Code.GetHashCode();
      if (period_ != null) hash ^= Period.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      identifier_.WriteTo(output, _repeated_identifier_codec);
      if (code_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Code);
      }
      if (period_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Period);
      }
      if (issuer_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Issuer);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += identifier_.CalculateSize(_repeated_identifier_codec);
      if (code_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Code);
      }
      if (period_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Period);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      return size;
    }

    public void MergeFrom(Qualifications other) {
      if (other == null) {
        return;
      }
      identifier_.Add(other.identifier_);
      if (other.code_ != null) {
        if (code_ == null) {
          code_ = new global::Fhirbuffs.CodeableConcept();
        }
        Code.MergeFrom(other.Code);
      }
      if (other.period_ != null) {
        if (period_ == null) {
          period_ = new global::Fhirbuffs.Period();
        }
        Period.MergeFrom(other.Period);
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          issuer_ = new global::Fhirbuffs.Organization();
        }
        Issuer.MergeFrom(other.Issuer);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            identifier_.AddEntriesFrom(input, _repeated_identifier_codec);
            break;
          }
          case 18: {
            if (code_ == null) {
              code_ = new global::Fhirbuffs.CodeableConcept();
            }
            input.ReadMessage(code_);
            break;
          }
          case 26: {
            if (period_ == null) {
              period_ = new global::Fhirbuffs.Period();
            }
            input.ReadMessage(period_);
            break;
          }
          case 34: {
            if (issuer_ == null) {
              issuer_ = new global::Fhirbuffs.Organization();
            }
            input.ReadMessage(issuer_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
