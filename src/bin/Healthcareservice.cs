// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: healthcareservice.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Fhirbuffs {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Healthcareservice {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Healthcareservice() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdoZWFsdGhjYXJlc2VydmljZS5wcm90bxIJZmhpcmJ1ZmZzGhBwcmltaXRp",
            "dmVzLnByb3RvGg5sb2NhdGlvbi5wcm90byLgBgoRSGVhbHRoY2FyZVNlcnZp",
            "Y2USKQoKaWRlbnRpZmllchgBIAMoCzIVLmZoaXJidWZmcy5JZGVudGlmaWVy",
            "EisKCnByb3ZpZGVkQnkYAiABKAsyFy5maGlyYnVmZnMuT3JnYW5pemF0aW9u",
            "EjMKD3NlcnZpY2VDYXRlZ29yeRgDIAEoCzIaLmZoaXJidWZmcy5Db2RlYWJs",
            "ZUNvbmNlcHQSKwoLc2VydmljZVR5cGUYBCADKAsyFi5maGlyYnVmZnMuU2Vy",
            "dmljZVR5cGUSJQoIbG9jYXRpb24YBSABKAsyEy5maGlyYnVmZnMuTG9jYXRp",
            "b24SEwoLc2VydmljZU5hbWUYBiABKAkSDwoHY29tbWVudBgHIAEoCRIUCgxl",
            "eHRyYURldGFpbHMYCCABKAkSJAoFcGhvdG8YCSABKAsyFS5maGlyYnVmZnMu",
            "QXR0YWNobWVudBIoCgd0ZWxlY29tGAogAygLMhcuZmhpcmJ1ZmZzLkNvbnRh",
            "Y3RQb2ludBIpCgxjb3ZlcmFnZUFyZWEYCyADKAsyEy5maGlyYnVmZnMuTG9j",
            "YXRpb24SOAoUc2VydmljZVByb3Zpc2lvbkNvZGUYDCADKAsyGi5maGlyYnVm",
            "ZnMuQ29kZWFibGVDb25jZXB0Ei8KC2VsaWdpYmlsaXR5GA0gASgLMhouZmhp",
            "cmJ1ZmZzLkNvZGVhYmxlQ29uY2VwdBIXCg9lbGlnaWJpbGl0eU5vdGUYDiAB",
            "KAkSEwoLcHJvZ3JhbU5hbWUYDyADKAkSMgoOY2hhcmFjdGVyaXN0aWMYECAD",
            "KAsyGi5maGlyYnVmZnMuQ29kZWFibGVDb25jZXB0EjIKDnJlZmVycmFsTWV0",
            "aG9kGBEgAygLMhouZmhpcmJ1ZmZzLkNvZGVhYmxlQ29uY2VwdBIRCglwdWJs",
            "aWNLZXkYEiABKAkSGwoTYXBwb2ludG1lbnRSZXF1aXJlZBgTIAEoCBIvCg1h",
            "dmFpbGFibGVUaW1lGBQgASgLMhguZmhpcmJ1ZmZzLkF2YWlsYWJsZVRpbWUS",
            "MQoMbm90QXZhaWxhYmxlGBUgASgLMhsuZmhpcmJ1ZmZzLk5vdEF2YWlsYWJs",
            "ZVRpbWUSHgoWYXZhaWxhYmlsaXR5RXhjZXB0aW9ucxgWIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { global::Fhirbuffs.Primitives.Descriptor, global::Fhirbuffs.Proto.Location.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Fhirbuffs.HealthcareService), new[]{ "Identifier", "ProvidedBy", "ServiceCategory", "ServiceType", "Location", "ServiceName", "Comment", "ExtraDetails", "Photo", "Telecom", "CoverageArea", "ServiceProvisionCode", "Eligibility", "EligibilityNote", "ProgramName", "Characteristic", "ReferralMethod", "PublicKey", "AppointmentRequired", "AvailableTime", "NotAvailable", "AvailabilityExceptions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HealthcareService : pb::IMessage<HealthcareService> {
    private static readonly pb::MessageParser<HealthcareService> _parser = new pb::MessageParser<HealthcareService>(() => new HealthcareService());
    public static pb::MessageParser<HealthcareService> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fhirbuffs.Healthcareservice.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public HealthcareService() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HealthcareService(HealthcareService other) : this() {
      identifier_ = other.identifier_.Clone();
      ProvidedBy = other.providedBy_ != null ? other.ProvidedBy.Clone() : null;
      ServiceCategory = other.serviceCategory_ != null ? other.ServiceCategory.Clone() : null;
      serviceType_ = other.serviceType_.Clone();
      Location = other.location_ != null ? other.Location.Clone() : null;
      serviceName_ = other.serviceName_;
      comment_ = other.comment_;
      extraDetails_ = other.extraDetails_;
      Photo = other.photo_ != null ? other.Photo.Clone() : null;
      telecom_ = other.telecom_.Clone();
      coverageArea_ = other.coverageArea_.Clone();
      serviceProvisionCode_ = other.serviceProvisionCode_.Clone();
      Eligibility = other.eligibility_ != null ? other.Eligibility.Clone() : null;
      eligibilityNote_ = other.eligibilityNote_;
      programName_ = other.programName_.Clone();
      characteristic_ = other.characteristic_.Clone();
      referralMethod_ = other.referralMethod_.Clone();
      publicKey_ = other.publicKey_;
      appointmentRequired_ = other.appointmentRequired_;
      AvailableTime = other.availableTime_ != null ? other.AvailableTime.Clone() : null;
      NotAvailable = other.notAvailable_ != null ? other.NotAvailable.Clone() : null;
      availabilityExceptions_ = other.availabilityExceptions_;
    }

    public HealthcareService Clone() {
      return new HealthcareService(this);
    }

    public const int IdentifierFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Fhirbuffs.Identifier> _repeated_identifier_codec
        = pb::FieldCodec.ForMessage(10, global::Fhirbuffs.Identifier.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.Identifier> identifier_ = new pbc::RepeatedField<global::Fhirbuffs.Identifier>();
    public pbc::RepeatedField<global::Fhirbuffs.Identifier> Identifier {
      get { return identifier_; }
    }

    public const int ProvidedByFieldNumber = 2;
    private global::Fhirbuffs.Organization providedBy_;
    public global::Fhirbuffs.Organization ProvidedBy {
      get { return providedBy_; }
      set {
        providedBy_ = value;
      }
    }

    public const int ServiceCategoryFieldNumber = 3;
    private global::Fhirbuffs.CodeableConcept serviceCategory_;
    public global::Fhirbuffs.CodeableConcept ServiceCategory {
      get { return serviceCategory_; }
      set {
        serviceCategory_ = value;
      }
    }

    public const int ServiceTypeFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Fhirbuffs.ServiceType> _repeated_serviceType_codec
        = pb::FieldCodec.ForMessage(34, global::Fhirbuffs.ServiceType.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.ServiceType> serviceType_ = new pbc::RepeatedField<global::Fhirbuffs.ServiceType>();
    public pbc::RepeatedField<global::Fhirbuffs.ServiceType> ServiceType {
      get { return serviceType_; }
    }

    public const int LocationFieldNumber = 5;
    private global::Fhirbuffs.Location location_;
    public global::Fhirbuffs.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    public const int ServiceNameFieldNumber = 6;
    private string serviceName_ = "";
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CommentFieldNumber = 7;
    private string comment_ = "";
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ExtraDetailsFieldNumber = 8;
    private string extraDetails_ = "";
    public string ExtraDetails {
      get { return extraDetails_; }
      set {
        extraDetails_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int PhotoFieldNumber = 9;
    private global::Fhirbuffs.Attachment photo_;
    public global::Fhirbuffs.Attachment Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    public const int TelecomFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Fhirbuffs.ContactPoint> _repeated_telecom_codec
        = pb::FieldCodec.ForMessage(82, global::Fhirbuffs.ContactPoint.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.ContactPoint> telecom_ = new pbc::RepeatedField<global::Fhirbuffs.ContactPoint>();
    public pbc::RepeatedField<global::Fhirbuffs.ContactPoint> Telecom {
      get { return telecom_; }
    }

    public const int CoverageAreaFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Fhirbuffs.Location> _repeated_coverageArea_codec
        = pb::FieldCodec.ForMessage(90, global::Fhirbuffs.Location.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.Location> coverageArea_ = new pbc::RepeatedField<global::Fhirbuffs.Location>();
    public pbc::RepeatedField<global::Fhirbuffs.Location> CoverageArea {
      get { return coverageArea_; }
    }

    public const int ServiceProvisionCodeFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Fhirbuffs.CodeableConcept> _repeated_serviceProvisionCode_codec
        = pb::FieldCodec.ForMessage(98, global::Fhirbuffs.CodeableConcept.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.CodeableConcept> serviceProvisionCode_ = new pbc::RepeatedField<global::Fhirbuffs.CodeableConcept>();
    public pbc::RepeatedField<global::Fhirbuffs.CodeableConcept> ServiceProvisionCode {
      get { return serviceProvisionCode_; }
    }

    public const int EligibilityFieldNumber = 13;
    private global::Fhirbuffs.CodeableConcept eligibility_;
    public global::Fhirbuffs.CodeableConcept Eligibility {
      get { return eligibility_; }
      set {
        eligibility_ = value;
      }
    }

    public const int EligibilityNoteFieldNumber = 14;
    private string eligibilityNote_ = "";
    public string EligibilityNote {
      get { return eligibilityNote_; }
      set {
        eligibilityNote_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ProgramNameFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_programName_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> programName_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> ProgramName {
      get { return programName_; }
    }

    public const int CharacteristicFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Fhirbuffs.CodeableConcept> _repeated_characteristic_codec
        = pb::FieldCodec.ForMessage(130, global::Fhirbuffs.CodeableConcept.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.CodeableConcept> characteristic_ = new pbc::RepeatedField<global::Fhirbuffs.CodeableConcept>();
    public pbc::RepeatedField<global::Fhirbuffs.CodeableConcept> Characteristic {
      get { return characteristic_; }
    }

    public const int ReferralMethodFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Fhirbuffs.CodeableConcept> _repeated_referralMethod_codec
        = pb::FieldCodec.ForMessage(138, global::Fhirbuffs.CodeableConcept.Parser);
    private readonly pbc::RepeatedField<global::Fhirbuffs.CodeableConcept> referralMethod_ = new pbc::RepeatedField<global::Fhirbuffs.CodeableConcept>();
    public pbc::RepeatedField<global::Fhirbuffs.CodeableConcept> ReferralMethod {
      get { return referralMethod_; }
    }

    public const int PublicKeyFieldNumber = 18;
    private string publicKey_ = "";
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int AppointmentRequiredFieldNumber = 19;
    private bool appointmentRequired_;
    public bool AppointmentRequired {
      get { return appointmentRequired_; }
      set {
        appointmentRequired_ = value;
      }
    }

    public const int AvailableTimeFieldNumber = 20;
    private global::Fhirbuffs.AvailableTime availableTime_;
    public global::Fhirbuffs.AvailableTime AvailableTime {
      get { return availableTime_; }
      set {
        availableTime_ = value;
      }
    }

    public const int NotAvailableFieldNumber = 21;
    private global::Fhirbuffs.NotAvailableTime notAvailable_;
    public global::Fhirbuffs.NotAvailableTime NotAvailable {
      get { return notAvailable_; }
      set {
        notAvailable_ = value;
      }
    }

    public const int AvailabilityExceptionsFieldNumber = 22;
    private string availabilityExceptions_ = "";
    public string AvailabilityExceptions {
      get { return availabilityExceptions_; }
      set {
        availabilityExceptions_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as HealthcareService);
    }

    public bool Equals(HealthcareService other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!identifier_.Equals(other.identifier_)) return false;
      if (!object.Equals(ProvidedBy, other.ProvidedBy)) return false;
      if (!object.Equals(ServiceCategory, other.ServiceCategory)) return false;
      if(!serviceType_.Equals(other.serviceType_)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (ServiceName != other.ServiceName) return false;
      if (Comment != other.Comment) return false;
      if (ExtraDetails != other.ExtraDetails) return false;
      if (!object.Equals(Photo, other.Photo)) return false;
      if(!telecom_.Equals(other.telecom_)) return false;
      if(!coverageArea_.Equals(other.coverageArea_)) return false;
      if(!serviceProvisionCode_.Equals(other.serviceProvisionCode_)) return false;
      if (!object.Equals(Eligibility, other.Eligibility)) return false;
      if (EligibilityNote != other.EligibilityNote) return false;
      if(!programName_.Equals(other.programName_)) return false;
      if(!characteristic_.Equals(other.characteristic_)) return false;
      if(!referralMethod_.Equals(other.referralMethod_)) return false;
      if (PublicKey != other.PublicKey) return false;
      if (AppointmentRequired != other.AppointmentRequired) return false;
      if (!object.Equals(AvailableTime, other.AvailableTime)) return false;
      if (!object.Equals(NotAvailable, other.NotAvailable)) return false;
      if (AvailabilityExceptions != other.AvailabilityExceptions) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= identifier_.GetHashCode();
      if (providedBy_ != null) hash ^= ProvidedBy.GetHashCode();
      if (serviceCategory_ != null) hash ^= ServiceCategory.GetHashCode();
      hash ^= serviceType_.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (ExtraDetails.Length != 0) hash ^= ExtraDetails.GetHashCode();
      if (photo_ != null) hash ^= Photo.GetHashCode();
      hash ^= telecom_.GetHashCode();
      hash ^= coverageArea_.GetHashCode();
      hash ^= serviceProvisionCode_.GetHashCode();
      if (eligibility_ != null) hash ^= Eligibility.GetHashCode();
      if (EligibilityNote.Length != 0) hash ^= EligibilityNote.GetHashCode();
      hash ^= programName_.GetHashCode();
      hash ^= characteristic_.GetHashCode();
      hash ^= referralMethod_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (AppointmentRequired != false) hash ^= AppointmentRequired.GetHashCode();
      if (availableTime_ != null) hash ^= AvailableTime.GetHashCode();
      if (notAvailable_ != null) hash ^= NotAvailable.GetHashCode();
      if (AvailabilityExceptions.Length != 0) hash ^= AvailabilityExceptions.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      identifier_.WriteTo(output, _repeated_identifier_codec);
      if (providedBy_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProvidedBy);
      }
      if (serviceCategory_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ServiceCategory);
      }
      serviceType_.WriteTo(output, _repeated_serviceType_codec);
      if (location_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Location);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServiceName);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Comment);
      }
      if (ExtraDetails.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ExtraDetails);
      }
      if (photo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Photo);
      }
      telecom_.WriteTo(output, _repeated_telecom_codec);
      coverageArea_.WriteTo(output, _repeated_coverageArea_codec);
      serviceProvisionCode_.WriteTo(output, _repeated_serviceProvisionCode_codec);
      if (eligibility_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Eligibility);
      }
      if (EligibilityNote.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(EligibilityNote);
      }
      programName_.WriteTo(output, _repeated_programName_codec);
      characteristic_.WriteTo(output, _repeated_characteristic_codec);
      referralMethod_.WriteTo(output, _repeated_referralMethod_codec);
      if (PublicKey.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PublicKey);
      }
      if (AppointmentRequired != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(AppointmentRequired);
      }
      if (availableTime_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(AvailableTime);
      }
      if (notAvailable_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(NotAvailable);
      }
      if (AvailabilityExceptions.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(AvailabilityExceptions);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += identifier_.CalculateSize(_repeated_identifier_codec);
      if (providedBy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProvidedBy);
      }
      if (serviceCategory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceCategory);
      }
      size += serviceType_.CalculateSize(_repeated_serviceType_codec);
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (ExtraDetails.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraDetails);
      }
      if (photo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
      }
      size += telecom_.CalculateSize(_repeated_telecom_codec);
      size += coverageArea_.CalculateSize(_repeated_coverageArea_codec);
      size += serviceProvisionCode_.CalculateSize(_repeated_serviceProvisionCode_codec);
      if (eligibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Eligibility);
      }
      if (EligibilityNote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EligibilityNote);
      }
      size += programName_.CalculateSize(_repeated_programName_codec);
      size += characteristic_.CalculateSize(_repeated_characteristic_codec);
      size += referralMethod_.CalculateSize(_repeated_referralMethod_codec);
      if (PublicKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (AppointmentRequired != false) {
        size += 2 + 1;
      }
      if (availableTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvailableTime);
      }
      if (notAvailable_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NotAvailable);
      }
      if (AvailabilityExceptions.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AvailabilityExceptions);
      }
      return size;
    }

    public void MergeFrom(HealthcareService other) {
      if (other == null) {
        return;
      }
      identifier_.Add(other.identifier_);
      if (other.providedBy_ != null) {
        if (providedBy_ == null) {
          providedBy_ = new global::Fhirbuffs.Organization();
        }
        ProvidedBy.MergeFrom(other.ProvidedBy);
      }
      if (other.serviceCategory_ != null) {
        if (serviceCategory_ == null) {
          serviceCategory_ = new global::Fhirbuffs.CodeableConcept();
        }
        ServiceCategory.MergeFrom(other.ServiceCategory);
      }
      serviceType_.Add(other.serviceType_);
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Fhirbuffs.Location();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      if (other.ExtraDetails.Length != 0) {
        ExtraDetails = other.ExtraDetails;
      }
      if (other.photo_ != null) {
        if (photo_ == null) {
          photo_ = new global::Fhirbuffs.Attachment();
        }
        Photo.MergeFrom(other.Photo);
      }
      telecom_.Add(other.telecom_);
      coverageArea_.Add(other.coverageArea_);
      serviceProvisionCode_.Add(other.serviceProvisionCode_);
      if (other.eligibility_ != null) {
        if (eligibility_ == null) {
          eligibility_ = new global::Fhirbuffs.CodeableConcept();
        }
        Eligibility.MergeFrom(other.Eligibility);
      }
      if (other.EligibilityNote.Length != 0) {
        EligibilityNote = other.EligibilityNote;
      }
      programName_.Add(other.programName_);
      characteristic_.Add(other.characteristic_);
      referralMethod_.Add(other.referralMethod_);
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.AppointmentRequired != false) {
        AppointmentRequired = other.AppointmentRequired;
      }
      if (other.availableTime_ != null) {
        if (availableTime_ == null) {
          availableTime_ = new global::Fhirbuffs.AvailableTime();
        }
        AvailableTime.MergeFrom(other.AvailableTime);
      }
      if (other.notAvailable_ != null) {
        if (notAvailable_ == null) {
          notAvailable_ = new global::Fhirbuffs.NotAvailableTime();
        }
        NotAvailable.MergeFrom(other.NotAvailable);
      }
      if (other.AvailabilityExceptions.Length != 0) {
        AvailabilityExceptions = other.AvailabilityExceptions;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            identifier_.AddEntriesFrom(input, _repeated_identifier_codec);
            break;
          }
          case 18: {
            if (providedBy_ == null) {
              providedBy_ = new global::Fhirbuffs.Organization();
            }
            input.ReadMessage(providedBy_);
            break;
          }
          case 26: {
            if (serviceCategory_ == null) {
              serviceCategory_ = new global::Fhirbuffs.CodeableConcept();
            }
            input.ReadMessage(serviceCategory_);
            break;
          }
          case 34: {
            serviceType_.AddEntriesFrom(input, _repeated_serviceType_codec);
            break;
          }
          case 42: {
            if (location_ == null) {
              location_ = new global::Fhirbuffs.Location();
            }
            input.ReadMessage(location_);
            break;
          }
          case 50: {
            ServiceName = input.ReadString();
            break;
          }
          case 58: {
            Comment = input.ReadString();
            break;
          }
          case 66: {
            ExtraDetails = input.ReadString();
            break;
          }
          case 74: {
            if (photo_ == null) {
              photo_ = new global::Fhirbuffs.Attachment();
            }
            input.ReadMessage(photo_);
            break;
          }
          case 82: {
            telecom_.AddEntriesFrom(input, _repeated_telecom_codec);
            break;
          }
          case 90: {
            coverageArea_.AddEntriesFrom(input, _repeated_coverageArea_codec);
            break;
          }
          case 98: {
            serviceProvisionCode_.AddEntriesFrom(input, _repeated_serviceProvisionCode_codec);
            break;
          }
          case 106: {
            if (eligibility_ == null) {
              eligibility_ = new global::Fhirbuffs.CodeableConcept();
            }
            input.ReadMessage(eligibility_);
            break;
          }
          case 114: {
            EligibilityNote = input.ReadString();
            break;
          }
          case 122: {
            programName_.AddEntriesFrom(input, _repeated_programName_codec);
            break;
          }
          case 130: {
            characteristic_.AddEntriesFrom(input, _repeated_characteristic_codec);
            break;
          }
          case 138: {
            referralMethod_.AddEntriesFrom(input, _repeated_referralMethod_codec);
            break;
          }
          case 146: {
            PublicKey = input.ReadString();
            break;
          }
          case 152: {
            AppointmentRequired = input.ReadBool();
            break;
          }
          case 162: {
            if (availableTime_ == null) {
              availableTime_ = new global::Fhirbuffs.AvailableTime();
            }
            input.ReadMessage(availableTime_);
            break;
          }
          case 170: {
            if (notAvailable_ == null) {
              notAvailable_ = new global::Fhirbuffs.NotAvailableTime();
            }
            input.ReadMessage(notAvailable_);
            break;
          }
          case 178: {
            AvailabilityExceptions = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
