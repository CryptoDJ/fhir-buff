// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: practitioner.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Practitioner.pbobjc.h"
#import "Primitives.pbobjc.h"
#import "Location.pbobjc.h"
#import "Healthcareservice.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - PractitionerRoot

@implementation PractitionerRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[PrimitivesRoot extensionRegistry]];
    [registry addExtensions:[LocationRoot extensionRegistry]];
    [registry addExtensions:[HealthcareserviceRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - PractitionerRoot_FileDescriptor

static GPBFileDescriptor *PractitionerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"fhirbuffs"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PractitionerRole

@implementation PractitionerRole

@dynamic hasManagingOrganization, managingOrganization;
@dynamic hasRole, role;
@dynamic specialtyArray, specialtyArray_Count;
@dynamic hasPeriod, period;
@dynamic locationArray, locationArray_Count;
@dynamic hasHealthcareService, healthcareService;

typedef struct PractitionerRole__storage_ {
  uint32_t _has_storage_[1];
  Organization *managingOrganization;
  CodeableConcept *role;
  NSMutableArray *specialtyArray;
  Period *period;
  NSMutableArray *locationArray;
  HealthcareService *healthcareService;
} PractitionerRole__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "managingOrganization",
        .number = PractitionerRole_FieldNumber_ManagingOrganization,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PractitionerRole__storage_, managingOrganization),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Organization),
        .fieldOptions = NULL,
      },
      {
        .name = "role",
        .number = PractitionerRole_FieldNumber_Role,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PractitionerRole__storage_, role),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(CodeableConcept),
        .fieldOptions = NULL,
      },
      {
        .name = "specialtyArray",
        .number = PractitionerRole_FieldNumber_SpecialtyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PractitionerRole__storage_, specialtyArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(CodeableConcept),
        .fieldOptions = NULL,
      },
      {
        .name = "period",
        .number = PractitionerRole_FieldNumber_Period,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PractitionerRole__storage_, period),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Period),
        .fieldOptions = NULL,
      },
      {
        .name = "locationArray",
        .number = PractitionerRole_FieldNumber_LocationArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PractitionerRole__storage_, locationArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Location),
        .fieldOptions = NULL,
      },
      {
        .name = "healthcareService",
        .number = PractitionerRole_FieldNumber_HealthcareService,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PractitionerRole__storage_, healthcareService),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(HealthcareService),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\001\024\000\006\021\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PractitionerRole class]
                                     rootClass:[PractitionerRoot class]
                                          file:PractitionerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PractitionerRole__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Practitioner

@implementation Practitioner

@dynamic identifierArray, identifierArray_Count;
@dynamic active;
@dynamic hasName, name;
@dynamic telecomArray, telecomArray_Count;
@dynamic addressArray, addressArray_Count;
@dynamic gender;
@dynamic hasBirthDate, birthDate;
@dynamic photoArray, photoArray_Count;
@dynamic practitionerRoleArray, practitionerRoleArray_Count;
@dynamic qualificationArray, qualificationArray_Count;
@dynamic communicationArray, communicationArray_Count;

typedef struct Practitioner__storage_ {
  uint32_t _has_storage_[1];
  BOOL active;
  Gender gender;
  NSMutableArray *identifierArray;
  HumanName *name;
  NSMutableArray *telecomArray;
  NSMutableArray *addressArray;
  Date *birthDate;
  NSMutableArray *photoArray;
  NSMutableArray *practitionerRoleArray;
  NSMutableArray *qualificationArray;
  NSMutableArray *communicationArray;
} Practitioner__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "identifierArray",
        .number = Practitioner_FieldNumber_IdentifierArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Practitioner__storage_, identifierArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .fieldOptions = NULL,
      },
      {
        .name = "active",
        .number = Practitioner_FieldNumber_Active,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(Practitioner__storage_, active),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = Practitioner_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Practitioner__storage_, name),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(HumanName),
        .fieldOptions = NULL,
      },
      {
        .name = "telecomArray",
        .number = Practitioner_FieldNumber_TelecomArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Practitioner__storage_, telecomArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ContactPoint),
        .fieldOptions = NULL,
      },
      {
        .name = "addressArray",
        .number = Practitioner_FieldNumber_AddressArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Practitioner__storage_, addressArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .fieldOptions = NULL,
      },
      {
        .name = "gender",
        .number = Practitioner_FieldNumber_Gender,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(Practitioner__storage_, gender),
        .defaultValue.valueEnum = Gender_Male,
        .dataTypeSpecific.enumDescFunc = Gender_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "birthDate",
        .number = Practitioner_FieldNumber_BirthDate,
        .hasIndex = 6,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Practitioner__storage_, birthDate),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Date),
        .fieldOptions = NULL,
      },
      {
        .name = "photoArray",
        .number = Practitioner_FieldNumber_PhotoArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Practitioner__storage_, photoArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Attachment),
        .fieldOptions = NULL,
      },
      {
        .name = "practitionerRoleArray",
        .number = Practitioner_FieldNumber_PractitionerRoleArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Practitioner__storage_, practitionerRoleArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PractitionerRole),
        .fieldOptions = NULL,
      },
      {
        .name = "qualificationArray",
        .number = Practitioner_FieldNumber_QualificationArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Practitioner__storage_, qualificationArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Qualifications),
        .fieldOptions = NULL,
      },
      {
        .name = "communicationArray",
        .number = Practitioner_FieldNumber_CommunicationArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Practitioner__storage_, communicationArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(CodeableConcept),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\007\t\000\t\000practitionerRole\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Practitioner class]
                                     rootClass:[PractitionerRoot class]
                                          file:PractitionerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Practitioner__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Practitioner_Gender_RawValue(Practitioner *message) {
  GPBDescriptor *descriptor = [Practitioner descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Practitioner_FieldNumber_Gender];
  return GPBGetMessageInt32Field(message, field);
}

void SetPractitioner_Gender_RawValue(Practitioner *message, int32_t value) {
  GPBDescriptor *descriptor = [Practitioner descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Practitioner_FieldNumber_Gender];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


// @@protoc_insertion_point(global_scope)
